// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations to app models
  calendarAccounts CalendarAccount[]
  meetings         Meeting[]
  tasks            Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// QuickCal App Models
model CalendarAccount {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  label         String
  provider      String    // 'google', etc.
  email         String
  access_token  String    @db.Text
  refresh_token String?   @db.Text
  expires_at    Int?
  color         String    @default("#000000")
  isActive      Boolean   @default(true)
  syncEnabled   Boolean   @default(true)
  isPrimary     Boolean   @default(false)  // New field to explicitly mark primary accounts
  lastSynced    DateTime?
  settings      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  meetings      Meeting[]

  @@unique([userId, email])
}

model Meeting {
  id                String          @id @default(cuid())
  calendarAccountId String
  calendarAccount   CalendarAccount @relation(fields: [calendarAccountId], references: [id], onDelete: Cascade)
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  externalId        String          // ID from Google Calendar
  title             String
  description       String?         @db.Text
  location          String?
  startTime         DateTime
  endTime           DateTime
  allDay            Boolean         @default(false)
  recurringEventId  String?        
  attendees         Json?          // Array of emails/names
  transcriptUrl     String?        // URL to audio transcription
  aiSummary         String?        @db.Text
  aiActionItems     Json?          // Extracted action items
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@unique([calendarAccountId, externalId])
}

model Task {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?   @db.Text
  status      String    @default("todo") // todo, in-progress, done
  priority    String    @default("medium") // low, medium, high
  dueDate     DateTime?
  meetingId   String?   // Optional relation to a meeting
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}