This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
actions/
  auth.ts
  signout.ts
app/
  (dashboard)/
    dashboard/
      accounts/
        add/
          page.tsx
        page.tsx
      calendar/
        page.tsx
      page.tsx
    layout.tsx
  api/
    accounts/
      [id]/
        sync/
          route.ts
    auth/
      [...nextauth]/
        route.ts
      callback/
        google/
          route.ts
        route.ts
    calendars/
      secondary/
        callback/
          route.ts
        connect/
          route.ts
    jobs/
      sync-calendars/
        route.ts
  error/
    page.tsx
  logged-in-calendar/
    page.tsx
    SyncButton.tsx
  login/
    page.tsx
  onboarding/
    connect-calendar/
      page.tsx
    welcome/
      page.tsx
    layout.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  auth/
    login-form.tsx
  dashboard/
    add-account-form.tsx
    header.tsx
    sidebar.tsx
lib/
  account-utils.ts
  dashboard-data.ts
  db.ts
  google-calendar.ts
prisma/
  migrations/
    20250220040920_add_is_primary_field/
      migration.sql
    migration_lock.toml
  schema.prisma
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
scripts/
  check-api-dirs.js
  clear-db.ts
  debug-oauth.js
  test-oauth-flow.js
types/
  next-auth.d.ts
.gitignore
auth.ts
current-implementation.md
eslint.config.mjs
middleware.ts
multi-account-implementation.md
next.config.ts
package.json
postcss.config.mjs
project-status.md
README.md
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: actions/auth.ts
================
// actions/auth.ts
"use server";

import { signIn } from "@/auth";

/**
 * Sign in with Google (primary login)
 */
export async function signInWithGoogle() {
  return signIn("google", {
    redirectTo: "/dashboard",
  });
}

/**
 * Connect Google Calendar as a primary account
 * Uses the built-in NextAuth flow
 * @param userId User ID
 * @param label Label for the calendar
 * @param isPrimary Whether this is the primary account
 */
export async function connectGoogleCalendar(
  userId: string, 
  label: string, 
  isPrimary: boolean = false
) {
  // Pass params to our custom callback handler
  return signIn("google", {
    callbackUrl: `/api/auth/callback/google?userId=${encodeURIComponent(userId)}&label=${encodeURIComponent(label)}&isPrimary=${isPrimary}`,
  });
}

================
File: actions/signout.ts
================
'use server';

import { signOut } from '@/auth';

export async function signOutUser() {
  return signOut({ redirectTo: "/" });
}

================
File: app/(dashboard)/dashboard/accounts/add/page.tsx
================
import Link from "next/link";
import { auth } from "@/auth";
import { redirect } from "next/navigation";
import { ArrowLeft, Calendar, Shield, AlertCircle } from "lucide-react";
import AddAccountForm from "@/components/dashboard/add-account-form";
import { getCalendarAccountsWithStatus } from "@/lib/dashboard-data";

export const metadata = {
  title: "Connect Calendar",
  description: "Connect your Google Calendar to QuickCal",
};

export default async function AddAccountPage() {
  const session = await auth();

  if (!session?.user) {
    redirect("/login");
  }
  
  // Check if user already has a primary account
  const accounts = await getCalendarAccountsWithStatus(session.user.id);
  const hasPrimaryAccount = accounts.some(acc => acc.isPrimary);

  return (
    <div className="space-y-6 max-w-2xl mx-auto">
      <div className="flex items-center gap-2">
        <Link 
          href="/dashboard/accounts" 
          className="brutalist-button-small inline-flex items-center gap-1"
        >
          <ArrowLeft className="h-4 w-4" />
          Back
        </Link>
        <h1 className="heading-md">Connect Calendar</h1>
      </div>

      <div className="brutalist-box">
        <h2 className="heading-sm mb-4">
          {hasPrimaryAccount 
            ? "Add an Additional Google Calendar" 
            : "Connect Your Primary Google Calendar"}
        </h2>
        
        {hasPrimaryAccount ? (
          <p className="mb-6">
            Add another Google Calendar account to consolidate all your events in one place. 
            Each additional calendar will be synchronized separately.
          </p>
        ) : (
          <p className="mb-6">
            To get started with QuickCal, connect your main Google Calendar account.
            This will be set as your primary calendar for scheduling and AI features.
          </p>
        )}

        <AddAccountForm 
          userId={session.user.id} 
          isPrimary={!hasPrimaryAccount}
        />
      </div>

      <div className="brutalist-box bg-[#f4f4f4]">
        <h3 className="heading-sm mb-4">What to Expect</h3>
        <div className="space-y-5">
          <div className="flex gap-3 items-start">
            <Calendar className="h-5 w-5 shrink-0 mt-1" />
            <div>
              <strong>View all your calendars in one place</strong>
              <p className="text-sm">After connecting, we'll sync your events and display them in your QuickCal dashboard.</p>
            </div>
          </div>
          
          <div className="flex gap-3 items-start">
            <Shield className="h-5 w-5 shrink-0 mt-1" />
            <div>
              <strong>Privacy & Permissions</strong>
              <p className="text-sm">QuickCal only reads your calendar data. We'll never modify or delete your events without explicit permission.</p>
            </div>
          </div>
          
          <div className="flex gap-3 items-start">
            <AlertCircle className="h-5 w-5 shrink-0 mt-1" />
            <div>
              <strong>Google OAuth Permission</strong>
              <p className="text-sm">You'll be redirected to Google to grant QuickCal access to your calendar. You can revoke this access anytime.</p>
            </div>
          </div>
        </div>
      </div>
      
      {hasPrimaryAccount && (
        <div className="brutalist-box border-2 border-dashed">
          <h3 className="heading-sm mb-2">About Additional Calendars</h3>
          <p className="mb-4">
            Additional calendars are displayed alongside your primary calendar, making it easy to see all your events in one view.
          </p>
          <ul className="space-y-2 text-sm">
            <li className="flex gap-2">
              <span>✓</span>
              <span>Events appear in your unified calendar view</span>
            </li>
            <li className="flex gap-2">
              <span>✓</span>
              <span>AI insights work across all connected calendars</span>
            </li>
            <li className="flex gap-2">
              <span>✓</span>
              <span>Each calendar gets a unique color for easy identification</span>
            </li>
            <li className="flex gap-2">
              <span>✓</span>
              <span>Sync settings can be configured individually per calendar</span>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

================
File: app/(dashboard)/dashboard/accounts/page.tsx
================
// app/(dashboard)/dashboard/accounts/page.tsx

import Link from "next/link";
import { auth } from "@/auth";
import { redirect } from "next/navigation";
import { getCalendarAccountsWithStatus } from "@/lib/dashboard-data";
import { 
  Calendar, 
  Plus, 
  RefreshCw, 
  AlertTriangle, 
  CheckCircle,
  Star
} from "lucide-react";
import { format } from "date-fns";

function getStatusMessage(params: { success?: string; error?: string }) {
  if (params.success === 'account_connected') {
    return {
      type: 'success',
      title: 'Calendar Connected Successfully',
      message: 'Your calendar has been connected and your events are being synced.',
    };
  }
  if (params.error === 'token_missing') {
    return {
      type: 'error',
      title: 'Authentication Failed',
      message: "We couldn't get authentication tokens from Google. Please try again.",
    };
  }
  if (params.error === 'profile_fetch_failed') {
    return {
      type: 'error',
      title: 'Profile Fetch Failed',
      message: "We couldn't fetch your Google profile. This could be a temporary issue. Please try again.",
    };
  }
  if (params.error === 'unknown') {
    return {
      type: 'error',
      title: 'Something Went Wrong',
      message: 'An unknown error occurred. Our hamsters are investigating the issue.',
    };
  }
  return null;
}

export default async function AccountsPage({
  searchParams,
}: {
  searchParams: { success?: string; error?: string };
}) {
  // Await searchParams before using them.
  const params = await Promise.resolve(searchParams);

  const session = await auth();
  if (!session?.user) {
    redirect("/login");
  }

  const accounts = await getCalendarAccountsWithStatus(session.user.id);
  console.log(`[ACCOUNTS-PAGE] Got ${accounts.length} accounts, isPrimary status:`, 
    accounts.map(acc => ({ 
      id: acc.id,
      email: acc.email,
      isPrimary: acc.isPrimary 
    }))
  );
  
  const statusMessage = getStatusMessage(params);
  
  // Separate primary from secondary accounts
  const primaryAccount = accounts.find(acc => acc.isPrimary);
  const secondaryAccounts = accounts.filter(acc => !acc.isPrimary);
  
  console.log(`[ACCOUNTS-PAGE] Primary account:`, primaryAccount?.id || 'none');
  console.log(`[ACCOUNTS-PAGE] Secondary accounts:`, secondaryAccounts.length);

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="heading-lg">Calendar Accounts</h1>
          <p className="text-muted-foreground">
            Manage your connected calendars and their sync settings.
          </p>
        </div>
        
        <Link 
          href="/dashboard/accounts/add" 
          className="brutalist-button-small inline-flex items-center gap-2"
        >
          <Plus className="h-4 w-4" />
          Connect Calendar
        </Link>
      </div>
      
      {statusMessage && (
        <div className={`brutalist-box ${statusMessage.type === 'success' ? 'bg-green-50' : 'bg-red-50'}`}>
          <div className="flex items-start gap-3">
            {statusMessage.type === 'success' ? (
              <CheckCircle className="h-5 w-5 text-green-600 shrink-0 mt-0.5" />
            ) : (
              <AlertTriangle className="h-5 w-5 text-red-600 shrink-0 mt-0.5" />
            )}
            <div>
              <h3 className="font-bold">{statusMessage.title}</h3>
              <p>{statusMessage.message}</p>
            </div>
          </div>
        </div>
      )}
      
      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="brutalist-box">
          <h3 className="font-bold mb-1">Total Accounts</h3>
          <p className="text-2xl">{accounts.length}</p>
          <p className="text-sm text-muted-foreground">
            {accounts.length === 0 
              ? "Add your first calendar to get started" 
              : `${accounts.filter(a => a.isActive && a.syncEnabled).length} active sync${accounts.filter(a => a.isActive && a.syncEnabled).length !== 1 ? 's' : ''}`}
          </p>
        </div>
        
        <div className="brutalist-box">
          <h3 className="font-bold mb-1">Sync Status</h3>
          <p className="text-2xl">
            {accounts.filter(acc => {
              if (!acc.lastSynced) return false;
              const hoursSinceSync = (Date.now() - new Date(acc.lastSynced).getTime()) / (1000 * 60 * 60);
              return hoursSinceSync < 24;
            }).length}/{accounts.length}
          </p>
          <p className="text-sm text-muted-foreground">
            Calendars synced in the last 24 hours
          </p>
        </div>
        
        <div className="brutalist-box">
          <h3 className="font-bold mb-1">Plan Usage</h3>
          <p className="text-2xl">{accounts.length}/10</p>
          <p className="text-sm text-muted-foreground">
            Calendars used in your free plan
          </p>
        </div>
      </div>
      
      {accounts.length === 0 ? (
        <div className="brutalist-box text-center py-12">
          <Calendar className="h-16 w-16 mx-auto mb-4 opacity-40" />
          <h3 className="heading-md mb-4">No Connected Calendars</h3>
          <p className="max-w-md mx-auto mb-6">
            Connect your Google Calendar to start syncing events and accessing QuickCal's features.
          </p>
          <Link href="/dashboard/accounts/add" className="brutalist-button inline-block">
            Connect Google Calendar
          </Link>
        </div>
      ) : (
        <div className="space-y-6">
          {/* Primary Account Section */}
          {primaryAccount && (
            <div className="space-y-4">
              <h2 className="heading-sm flex items-center gap-2">
                <Star className="h-5 w-5 fill-yellow-400 text-yellow-400" />
                Primary Calendar
              </h2>
              
              <div className="brutalist-box" style={{borderLeftWidth: '6px', borderLeftColor: primaryAccount.color}}>
                <div className="flex flex-col md:flex-row justify-between gap-4">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <h3 className="font-bold text-lg">{primaryAccount.label}</h3>
                      <span className="brutalist-tag">Primary</span>
                    </div>
                    <p>{primaryAccount.email}</p>
                    <div className="flex items-center gap-1 text-sm">
                      <span 
                        className="inline-block w-2 h-2 rounded-full"
                        style={{backgroundColor: primaryAccount.syncStatus.needsSync ? '#EF4444' : '#10B981'}}
                      ></span>
                      <span>{primaryAccount.syncStatus.label}</span>
                    </div>
                  </div>
                  
                  <div className="space-y-2 md:text-right">
                    <p className="text-sm">
                      <strong>{primaryAccount.meetingsCount}</strong> events synced
                    </p>
                    <p className="text-sm">
                      Last synced: {primaryAccount.lastSynced 
                        ? format(new Date(primaryAccount.lastSynced), 'MMM d, yyyy h:mm a')
                        : 'Never'}
                    </p>
                    <form action={`/api/accounts/${primaryAccount.id}/sync`}>
                      <button type="submit" className="brutalist-button-small inline-flex items-center gap-1">
                        <RefreshCw className="h-3 w-3" />
                        Sync Now
                      </button>
                    </form>
                  </div>
                </div>
                
                <div className="mt-4 pt-4 border-t-2 border-dashed border-gray-200">
                  <h4 className="font-bold mb-2">Primary Account Permissions</h4>
                  <ul className="text-sm space-y-1">
                    <li>• View and synchronize calendar events</li>
                    <li>• Transcribe meeting audio and generate summaries</li>
                    <li>• Extract action items and tasks from meetings</li>
                    <li>• Provide AI-powered scheduling assistance</li>
                  </ul>
                </div>
              </div>
            </div>
          )}
          
          {/* Secondary Accounts Section */}
          {secondaryAccounts.length > 0 && (
            <div className="space-y-4">
              <h2 className="heading-sm">Additional Calendars</h2>
              
              <div className="grid grid-cols-1 gap-4">
                {secondaryAccounts.map((account) => (
                  <div 
                    key={account.id} 
                    className="brutalist-box"
                    style={{borderLeftWidth: '6px', borderLeftColor: account.color}}
                  >
                    <div className="flex flex-col md:flex-row justify-between gap-4">
                      <div className="space-y-1">
                        <h3 className="font-bold text-lg">{account.label}</h3>
                        <p>{account.email}</p>
                        <div className="flex items-center gap-1 text-sm">
                          <span 
                            className="inline-block w-2 h-2 rounded-full"
                            style={{backgroundColor: account.syncStatus.needsSync ? '#EF4444' : '#10B981'}}
                          ></span>
                          <span>{account.syncStatus.label}</span>
                        </div>
                      </div>
                      
                      <div className="space-y-2 md:text-right">
                        <p className="text-sm">
                          <strong>{account.meetingsCount}</strong> events synced
                        </p>
                        <p className="text-sm">
                          Last synced: {account.lastSynced 
                            ? format(new Date(account.lastSynced), 'MMM d, yyyy h:mm a')
                            : 'Never'}
                        </p>
                        <div className="flex gap-2 justify-end">
                          <form action={`/api/accounts/${account.id}/sync`}>
                            <button type="submit" className="brutalist-button-small inline-flex items-center gap-1">
                              <RefreshCw className="h-3 w-3" />
                              Sync Now
                            </button>
                          </form>
                          <button className="brutalist-button-small">
                            Manage
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Connect More Accounts CTA */}
          <div className="brutalist-box bg-[#f4f4f4]">
            <div className="flex flex-col md:flex-row items-center gap-6">
              <div className="grow">
                <h3 className="heading-sm mb-2">Add Another Calendar</h3>
                <p className="mb-0">
                  Connect work, personal, or any other Google Calendar account to view all your events in one place.
                </p>
              </div>
              <Link href="/dashboard/accounts/add" className="brutalist-button shrink-0 whitespace-nowrap">
                Connect Calendar
              </Link>
            </div>
          </div>
        </div>
      )}
      
      {/* Information About Calendar Permissions */}
      <div className="brutalist-box">
        <h3 className="heading-sm mb-4">About Calendar Permissions</h3>
        <div className="space-y-4">
          <div className="flex items-start gap-3">
            <div className="w-7 h-7 shrink-0 flex items-center justify-center bg-black text-white rounded-full font-bold">
              1
            </div>
            <div>
              <h4 className="font-bold">Read-Only Access</h4>
              <p className="text-sm">
                QuickCal only reads your calendar data. We never modify, delete, or create events without your permission.
              </p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="w-7 h-7 shrink-0 flex items-center justify-center bg-black text-white rounded-full font-bold">
              2
            </div>
            <div>
              <h4 className="font-bold">Secure Data Handling</h4>
              <p className="text-sm">
                Your calendar data is encrypted and stored securely. We never share your data with third parties.
              </p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="w-7 h-7 shrink-0 flex items-center justify-center bg-black text-white rounded-full font-bold">
              3
            </div>
            <div>
              <h4 className="font-bold">Revoke Access Anytime</h4>
              <p className="text-sm">
                You can disconnect any calendar account at any time. This will stop syncing and remove all associated data.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/(dashboard)/dashboard/calendar/page.tsx
================
import Link from "next/link";
import { auth } from "@/auth";
import { redirect } from "next/navigation";
import { CalendarDays, Plus, Filter, ArrowLeft, ArrowRight } from "lucide-react";
import { format, getMonth, getYear } from "date-fns";
import { getCalendarMonthEvents, formatMeetingTime } from "@/lib/dashboard-data";
import { getCalendarAccountCount } from "@/lib/account-utils";

export const metadata = {
  title: "Calendar",
  description: "View and manage your events - if you have any",
};

export default async function CalendarPage({
  searchParams
}: {
  searchParams: { year?: string; month?: string }
}) {
  const session = await auth();

  if (!session?.user) {
    redirect("/login");
  }

  // Get current date or date from query params
  const today = new Date();
  const currentYear = parseInt(searchParams.year || getYear(today).toString());
  const currentMonth = parseInt(searchParams.month || (getMonth(today) + 1).toString());
  
  // Format for display
  const currentMonthName = format(new Date(currentYear, currentMonth - 1), 'MMMM yyyy');

  // Get calendar data
  const calendarData = await getCalendarMonthEvents(session.user.id, currentYear, currentMonth);
  const accountsCount = await getCalendarAccountCount(session.user.id);
  const hasEvents = calendarData.totalEvents > 0;
  const hasAccounts = accountsCount > 0;

  // Calculate previous and next month links
  let prevMonth = currentMonth - 1;
  let prevYear = currentYear;
  if (prevMonth < 1) {
    prevMonth = 12;
    prevYear--;
  }

  let nextMonth = currentMonth + 1;
  let nextYear = currentYear;
  if (nextMonth > 12) {
    nextMonth = 1;
    nextYear++;
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="heading-lg">Calendar</h1>
          <p className="text-muted-foreground">
            View all your meetings in one judgmental place.
          </p>
        </div>

        <div className="flex items-center gap-3">
          <button className="brutalist-button-small inline-flex items-center gap-2">
            <Filter className="h-4 w-4" />
            Filter
          </button>
          <Link href="/dashboard/calendar/new" className="brutalist-button-small inline-flex items-center gap-2">
            <Plus className="h-4 w-4" />
            New Event
          </Link>
        </div>
      </div>

      {hasAccounts ? (
        <div className="brutalist-box">
          <div className="flex flex-col md:flex-row justify-between items-center mb-6">
            <div className="flex items-center gap-4 mb-4 md:mb-0">
              <Link 
                href={`/dashboard/calendar?year=${prevYear}&month=${prevMonth}`} 
                className="brutalist-button-small p-1.5" 
                aria-label="Previous month"
              >
                <ArrowLeft className="h-4 w-4" />
              </Link>
              <h2 className="text-xl font-bold">{currentMonthName}</h2>
              <Link 
                href={`/dashboard/calendar?year=${nextYear}&month=${nextMonth}`} 
                className="brutalist-button-small p-1.5" 
                aria-label="Next month"
              >
                <ArrowRight className="h-4 w-4" />
              </Link>
            </div>

            <div className="flex items-center gap-3">
              <Link href={`/dashboard/calendar?year=${getYear(today)}&month=${getMonth(today) + 1}`} className="brutalist-button-small">Today</Link>
              <div className="flex border-2 border-black">
                <button className="px-3 py-1 font-bold border-r-2 border-black hover:bg-black hover:text-white transition-colors">Day</button>
                <button className="px-3 py-1 font-bold border-r-2 border-black bg-black text-white">Week</button>
                <button className="px-3 py-1 font-bold hover:bg-black hover:text-white transition-colors">Month</button>
              </div>
            </div>
          </div>

          <div className="overflow-x-auto">
            <div className="min-w-[800px]">
              {/* Calendar days header */}
              <div className="grid grid-cols-7 border-b-2 border-black">
                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (
                  <div key={day} className="p-2 text-center font-bold">
                    {day}
                  </div>
                ))}
              </div>

              {/* Calendar grid */}
              <div className="grid grid-cols-7 grid-rows-[auto]">
                {calendarData.grid.map((week, weekIndex) => (
                  week.map((day, dayIndex) => (
                    <div 
                      key={`${weekIndex}-${dayIndex}`} 
                      className={`border-b border-r border-black p-2 min-h-[120px] relative ${
                        dayIndex === 6 ? 'border-r-0' : ''
                      } ${
                        weekIndex === calendarData.grid.length - 1 ? 'border-b-0' : ''
                      } ${
                        !day.isCurrentMonth ? 'bg-gray-50' : ''
                      } ${
                        day.isToday ? 'bg-yellow-50' : ''
                      }`}
                    >
                      <span className={`text-sm ${day.isCurrentMonth ? 'font-bold' : 'opacity-40'} ${day.isToday ? 'brutalist-highlight' : ''}`}>
                        {day.date}
                      </span>
                      
                      <div className="mt-1 space-y-1 max-h-[90px] overflow-y-auto">
                        {day.events.map((event) => (
                          <div 
                            key={event.id}
                            className="text-xs p-1 truncate rounded"
                            style={{
                              backgroundColor: `${event.calendarAccount.color}30`,
                              borderLeft: `3px solid ${event.calendarAccount.color}`
                            }}
                            title={`${event.title} - ${formatMeetingTime(event)}`}
                          >
                            {event.allDay ? '● ' : `${format(event.startTime, 'HH:mm')} `}
                            {event.title}
                          </div>
                        ))}
                      </div>
                    </div>
                  ))
                ))}
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div className="brutalist-box text-center py-12">
          <CalendarDays className="h-16 w-16 mx-auto mb-4 opacity-40" />
          <h3 className="heading-md mb-4">No Connected Calendars</h3>
          <p className="max-w-md mx-auto mb-6">
            Your calendar is as empty as your social life. Connect your Google Calendar so we have something to judge.
          </p>
          <Link href="/dashboard/accounts/add" className="brutalist-button inline-block">
            Connect Google Calendar
          </Link>
        </div>
      )}

      {hasAccounts && !hasEvents && (
        <div className="brutalist-box bg-[#f4f4f4]">
          <h3 className="heading-sm mb-4">Your Calendar is Empty</h3>
          <p className="mb-4">
            We've connected to your calendar, but it seems you have no events. Either you're:
          </p>
          <ul className="space-y-2 mb-6">
            <li className="flex gap-2 items-start">
              <span className="font-bold">1.</span>
              <p>Incredibly efficient and don't need meetings (unlikely)</p>
            </li>
            <li className="flex gap-2 items-start">
              <span className="font-bold">2.</span>
              <p>Completely irrelevant and nobody invites you to anything (more likely)</p>
            </li>
            <li className="flex gap-2 items-start">
              <span className="font-bold">3.</span>
              <p>Using another calendar we haven't connected yet (easily fixable)</p>
            </li>
          </ul>
          <div className="flex justify-center">
            <Link href="/dashboard/accounts/add" className="brutalist-button-small">
              Connect Another Calendar
            </Link>
          </div>
        </div>
      )}
    </div>
  );
}

================
File: app/(dashboard)/dashboard/page.tsx
================
import { auth } from "@/auth";
import { redirect } from "next/navigation";
import { CalendarDays, ListTodo, Calendar, Plus, Clock, ArrowRight } from "lucide-react";
import Link from "next/link";
import { getDashboardStats } from "@/lib/dashboard-data";
import { format } from "date-fns";
import { formatMeetingTime } from "@/lib/dashboard-data";
import { getAccountSyncStats } from "@/lib/account-utils";

export const metadata = {
  title: "Dashboard",
  description: "Your QuickCal dashboard - where productivity meets brutal honesty",
};

export default async function DashboardPage() {
  const session = await auth();
  
  if (!session?.user) {
    redirect("/login");
  }

  // Get dashboard stats
  const stats = await getDashboardStats(session.user.id);
  const accountStats = await getAccountSyncStats(session.user.id);
  const hasEvents = stats.upcomingMeetingsCount > 0;
  const hasAccounts = accountStats.totalAccounts > 0;
  
  // Add debug logging
  console.log(`[DASHBOARD] Account stats:`, JSON.stringify(accountStats));
  
  // Check if there's at least one primary account
  const hasPrimaryAccount = accountStats.hasPrimary;
  console.log(`[DASHBOARD] Has primary account: ${hasPrimaryAccount}`);

  // Show onboarding banner only if no primary account exists
  const showOnboardingBanner = !hasPrimaryAccount;

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="heading-lg">Dashboard</h1>
          <p className="text-muted-foreground">
            Welcome back, {session.user.name || "Calendar Enthusiast"}. Let's judge your schedule.
          </p>
        </div>
        
        <Link href="/dashboard/accounts/add" className="brutalist-button-small inline-flex items-center gap-2">
          <Plus className="h-4 w-4" />
          Connect Calendar
        </Link>
      </div>
      
      {/* Onboarding Banner */}
      {showOnboardingBanner && (
        <div className="brutalist-box brutalist-purple">
          <div className="flex flex-col md:flex-row items-center justify-between gap-4">
            <div className="space-y-2">
              <h2 className="heading-sm text-white">Complete Your Setup</h2>
              <p className="text-white/90">
                Connect your primary calendar to unlock all QuickCal features.
              </p>
            </div>
            <Link href="/onboarding/connect-calendar" className="brutalist-button bg-white text-black whitespace-nowrap">
              Connect Primary Calendar
            </Link>
          </div>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-5">
        <div className="brutalist-box">
          <CalendarDays className="h-8 w-8 mb-2" />
          <h2 className="text-2xl font-bold">{stats.upcomingMeetingsCount}</h2>
          <p className="text-sm">Upcoming meetings</p>
          <p className="text-xs italic mt-2">
            {stats.upcomingMeetingsCount === 0 
              ? "There are no meetings. Is that good... or sad?"
              : stats.upcomingMeetingsCount > 5 
                ? "That's a lot of meetings. Do you actually do any work?"
                : "Just a few meetings. Maintaining the illusion of productivity."}
          </p>
        </div>
        
        <div className="brutalist-box">
          <ListTodo className="h-8 w-8 mb-2" />
          <h2 className="text-2xl font-bold">{stats.pendingTasksCount}</h2>
          <p className="text-sm">Pending tasks</p>
          <p className="text-xs italic mt-2">
            {stats.pendingTasksCount === 0
              ? "Your task list is as empty as your social calendar."
              : stats.pendingTasksCount > 10
                ? "Overachiever or just bad at finishing things?"
                : "A manageable number of tasks. We're all impressed."}
          </p>
        </div>
        
        <div className="brutalist-box">
          <Calendar className="h-8 w-8 mb-2" />
          <h2 className="text-2xl font-bold">{accountStats.totalAccounts}</h2>
          <p className="text-sm">Connected calendars</p>
          <p className="text-xs italic mt-2">
            {accountStats.totalAccounts === 0
              ? "Add a calendar so I can judge your life choices."
              : accountStats.totalAccounts === 1
                ? "Just one calendar? Keeping it simple or hiding something?"
                : "Multiple calendars. Impressively complicated life."}
          </p>
        </div>
        
        <div className="brutalist-box">
          <Clock className="h-8 w-8 mb-2" />
          <h2 className="text-2xl font-bold">{stats.meetingHoursThisWeek} hrs</h2>
          <p className="text-sm">Meeting time this week</p>
          <p className="text-xs italic mt-2">
            {stats.meetingHoursThisWeek === 0
              ? "Impressive! You're completely unproductive."
              : stats.meetingHoursThisWeek > 20
                ? "Meetings: where work goes to die."
                : "A reasonable amount of meeting time. Are you actually getting things done?"}
          </p>
        </div>
      </div>
      
      <div className="brutalist-box">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
          <div>
            <h2 className="heading-md">Coming Up Next</h2>
            <p>Your upcoming events, judged accordingly.</p>
          </div>
          <Link href="/dashboard/calendar" className="brutalist-button-small mt-2 md:mt-0 inline-flex items-center gap-2">
            View Calendar <ArrowRight className="h-4 w-4" />
          </Link>
        </div>
        
        {hasEvents ? (
          <div className="space-y-4">
            {stats.upcomingMeetings.map((meeting) => (
              <div 
                key={meeting.id} 
                className="calendar-event" 
                style={{
                  borderLeftWidth: '6px', 
                  borderLeftColor: meeting.calendarAccount?.color || '#000'
                }}
              >
                <div className="flex justify-between">
                  <div><span className="font-bold">{meeting.title}</span></div>
                  <div className="text-xs">
                    {format(meeting.startTime, 'EEE, MMM d')} • {formatMeetingTime(meeting)}
                  </div>
                </div>
                {meeting.location && (
                  <div className="text-sm mt-1">📍 {meeting.location}</div>
                )}
                <div className="text-xs italic mt-1 text-red-600">
                  {meeting.title.toLowerCase().includes('meet') ? 
                    "AI NOTE: This meeting could've been an email." :
                  meeting.title.toLowerCase().includes('catch') ?
                    "AI NOTE: 'Catch-up' is code for 'waste time chatting'." :
                  meeting.allDay ?
                    "AI NOTE: All-day event? Planning to actually work at some point?" :
                    "AI NOTE: Another chance to pretend you're listening while checking emails."}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="py-12 text-center">
            <Calendar className="h-16 w-16 mx-auto mb-4 opacity-40" />
            <h3 className="heading-sm mb-2">No Upcoming Events</h3>
            <p className="max-w-md mx-auto mb-6">
              {hasAccounts ? 
                "Your calendar is emptier than a politician's promises. Either you're incredibly efficient or completely irrelevant." :
                "Your calendar is empty because you haven't connected any accounts. Connect your Google Calendar to get started."}
            </p>
            <Link href={hasAccounts ? "/dashboard/calendar" : "/dashboard/accounts/add"} className="brutalist-button-small">
              {hasAccounts ? "View Calendar" : "Connect Google Calendar"}
            </Link>
          </div>
        )}
      </div>
      
      {hasAccounts && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-5">
          <div className="brutalist-box">
            <h2 className="heading-md mb-4">Quick Tasks</h2>
            <div className="py-8 text-center">
              <ListTodo className="h-10 w-10 mx-auto mb-4 opacity-40" />
              <h3 className="text-lg font-bold mb-2">Nothing to do</h3>
              <p className="max-w-md mx-auto">
                {hasEvents ?
                  "We could extract tasks from your meetings, but we don't think you'd do them anyway." :
                  "Either you're incredibly efficient or completely lazy. We're betting on the latter."}
              </p>
            </div>
          </div>
          
          <div className="brutalist-box">
            <h2 className="heading-md mb-4">Productivity Insights</h2>
            <div className="py-8 text-center">
              <svg className="w-10 h-10 mx-auto mb-4 opacity-40" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M21 16V8C21 7.46957 20.7893 6.96086 20.4142 6.58579C20.0391 6.21071 19.5304 6 19 6H5C4.46957 6 3.96086 6.21071 3.58579 6.58579C3.21071 6.96086 3 7.46957 3 8V16C3 16.5304 3.21071 17.0391 3.58579 17.4142C3.96086 17.7893 4.46957 18 5 18H19C19.5304 18 20.0391 17.7893 20.4142 17.4142C20.7893 17.0391 21 16.5304 21 16Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12C10 13.1046 10.8954 14 12 14Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M16 6V4C16 3.46957 15.7893 2.96086 15.4142 2.58579C15.0391 2.21071 14.5304 2 14 2H10C9.46957 2 8.96086 2.21071 8.58579 2.58579C8.21071 2.96086 8 3.46957 8 4V6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M8 18V20C8 20.5304 8.21071 21.0391 8.58579 21.4142C8.96086 21.7893 9.46957 22 10 22H14C14.5304 22 15.0391 21.7893 15.4142 21.4142C15.7893 21.0391 16 20.5304 16 20V18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
              <h3 className="text-lg font-bold mb-2">
                {hasEvents ? "Preliminary Analysis" : "No data available"}
              </h3>
              <p className="max-w-md mx-auto">
                {hasEvents ? 
                  `Based on your ${stats.upcomingMeetingsCount} upcoming meetings, you spend about ${stats.meetingHoursThisWeek} hours per week in meetings. That's ${stats.meetingHoursThisWeek > 10 ? "way too much" : "surprisingly reasonable"}.` :
                  "We need actual calendar data to judge your productivity. It's currently looking... non-existent."}
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

================
File: app/(dashboard)/layout.tsx
================
import { auth } from "@/auth";
import Header from "@/components/dashboard/header";
import Sidebar from "@/components/dashboard/sidebar";
import { redirect } from "next/navigation";

export default async function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const session = await auth();
  
  if (!session?.user) {
    redirect("/login");
  }
  
  return (
    <div className="min-h-screen flex flex-col">
      <Header user={session.user} />
      
      <div className="flex-grow flex flex-col md:flex-row">
        <Sidebar />
        <main className="flex-grow p-4 md:p-6">{children}</main>
      </div>
    </div>
  );
}

================
File: app/api/accounts/[id]/sync/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { auth } from "@/auth";
import { db } from "@/lib/db";
import { GoogleCalendarService } from "@/lib/google-calendar";

/**
 * POST handler to manually sync a calendar account's events
 */
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json(
        { error: "Unauthorized" },
        { status: 401 }
      );
    }

    const accountId = params.id;

    // Verify the account belongs to this user
    const account = await db.calendarAccount.findUnique({
      where: {
        id: accountId,
        userId: session.user.id,
      },
    });

    if (!account) {
      return NextResponse.json(
        { error: "Calendar account not found" },
        { status: 404 }
      );
    }

    // Check if the access token is expired
    const now = Math.floor(Date.now() / 1000);
    let accessToken = account.access_token;

    if (account.expires_at && account.expires_at < now && account.refresh_token) {
      try {
        // Refresh the token
        const { accessToken: newToken, expiresAt } = 
          await GoogleCalendarService.refreshAccessToken(account.refresh_token);
        
        // Update the token in the database
        await db.calendarAccount.update({
          where: { id: accountId },
          data: {
            access_token: newToken,
            expires_at: expiresAt,
          },
        });

        accessToken = newToken;
      } catch (error) {
        console.error("Failed to refresh token:", error);
        return NextResponse.json(
          { error: "Failed to refresh authentication token" },
          { status: 401 }
        );
      }
    }

    // Sync the events
    try {
      const eventCount = await GoogleCalendarService.syncEvents({
        ...account,
        access_token: accessToken,
      });

      return NextResponse.json({
        success: true,
        message: `Successfully synced ${eventCount} events`,
        syncedAt: new Date(),
      });
    } catch (error) {
      console.error("Failed to sync events:", error);
      return NextResponse.json(
        { error: "Failed to sync events" },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("Error in sync API:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// Support GET requests for form submissions
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const response = await POST(request, { params });
  
  // Redirect back to accounts page after sync
  const redirectUrl = new URL("/dashboard/accounts", request.url);
  
  if (response.status === 200) {
    redirectUrl.searchParams.set("success", "sync_complete");
  } else {
    redirectUrl.searchParams.set("error", "sync_failed");
  }
  
  return NextResponse.redirect(redirectUrl);
}

================
File: app/api/auth/[...nextauth]/route.ts
================
import { handlers } from "@/auth";

// Export all the request handlers from Auth.js
export const { GET, POST } = handlers;

================
File: app/api/auth/callback/google/route.ts
================
// app/api/auth/callback/google/route.ts
import { NextRequest, NextResponse } from "next/server";
import { auth, handlers } from "@/auth";
import { db } from "@/lib/db";
import { GoogleCalendarService } from "@/lib/google-calendar";
import { getCalendarAccountCount, getRandomColor, isLikelyWorkspaceEmail } from "@/lib/account-utils";

export async function GET(request: NextRequest) {
  console.log("[CALLBACK] Starting Google OAuth callback");
  
  // Let NextAuth handle the standard Google OAuth callback first.
  const nextAuthResponse = await handlers.GET(request);

  // Read the custom query parameters from the callback URL.
  const { searchParams } = new URL(request.url);
  const labelParam = searchParams.get("label") || "";
  const userIdParam = searchParams.get("userId") || "";
  const isPrimaryParam = searchParams.get("isPrimary") === "true";
  
  console.log(`[CALLBACK] Params - Label: "${labelParam}", isPrimary: ${isPrimaryParam}, userId: "${userIdParam}"`);

  // Get the session to access user info and tokens.
  const session = await auth();
  if (!session?.user) {
    console.error("[CALLBACK] No session found in callback");
    return nextAuthResponse;
  }
  
  // Use either the passed userId or the one from the session
  const userId = userIdParam || session.user.id;
  console.log(`[CALLBACK] Using User ID: ${userId}`);
  
  const token = session as any;
  const accessToken = token?.accessToken;
  const refreshToken = token?.refreshToken;
  const expiresAt = token?.accessTokenExpires;
  
  if (!accessToken) {
    console.error("[CALLBACK] No access token in session");
    return NextResponse.redirect(
      new URL("/dashboard/accounts?error=token_missing", request.url)
    );
  }

  // Fetch the user's Google profile to get their email.
  console.log("[CALLBACK] Fetching Google profile");
  const profileRes = await fetch("https://www.googleapis.com/oauth2/v2/userinfo", {
    headers: { Authorization: `Bearer ${accessToken}` },
  });
  
  if (!profileRes.ok) {
    console.error("[CALLBACK] Failed to fetch Google profile");
    return NextResponse.redirect(
      new URL("/dashboard/accounts?error=profile_fetch_failed", request.url)
    );
  }
  
  const profile = await profileRes.json();
  console.log(`[CALLBACK] Profile email: ${profile.email}`);

  // Check if user already has accounts
  const accountCount = await getCalendarAccountCount(userId);
  console.log(`[CALLBACK] Existing account count: ${accountCount}`);
  
  // Determine the label
  let label = labelParam;
  if (!label) {
    // Fallback if no label was passed
    label = accountCount === 0
      ? (isLikelyWorkspaceEmail(profile.email) ? "Work Calendar" : "Primary Calendar")
      : (isLikelyWorkspaceEmail(profile.email) ? "Work Calendar" : "Personal Calendar");
  }
  
  // Logic for determining primary status
  // If it's the first account or explicitly set as primary
  let isPrimary = accountCount === 0 || isPrimaryParam;
  console.log(`[CALLBACK] Setting isPrimary = ${isPrimary}`);

  try {
    // Get calendar metadata (timezone, etc.)
    console.log("[CALLBACK] Fetching calendar metadata");
    const calendarMetadata = await GoogleCalendarService.getCalendarMetadata(accessToken);
    
    // Check if this account already exists
    const existingAccount = await db.calendarAccount.findUnique({
      where: { 
        userId_email: { 
          userId, 
          email: profile.email 
        } 
      },
    });
    
    if (existingAccount) {
      console.log(`[CALLBACK] Account already exists, updating: ${existingAccount.id}`);
      // If existing is primary, keep it primary unless explicitly changing
      isPrimary = isPrimaryParam ? isPrimary : existingAccount.isPrimary;
    }

    // Upsert the CalendarAccount record in the database.
    console.log(`[CALLBACK] Upserting calendar account (isPrimary=${isPrimary})`);
    
    const calendarAccount = await db.calendarAccount.upsert({
      where: { 
        userId_email: { 
          userId, 
          email: profile.email 
        } 
      },
      update: {
        access_token: accessToken,
        refresh_token: refreshToken || existingAccount?.refresh_token || "",
        expires_at: expiresAt || null,
        label,
        isPrimary,
        updatedAt: new Date(),
      },
      create: {
        userId,
        label,
        provider: "google",
        email: profile.email,
        access_token: accessToken,
        refresh_token: refreshToken || "",
        expires_at: expiresAt || null,
        color: getRandomColor(),
        isPrimary,
        settings: {
          timeZone: calendarMetadata.timeZone || "UTC",
          backgroundColor: calendarMetadata.backgroundColor || null,
          foregroundColor: calendarMetadata.foregroundColor || null,
        },
      },
    });
    console.log(`[CALLBACK] Calendar account created/updated: id=${calendarAccount.id}, isPrimary=${calendarAccount.isPrimary}`);

    // If this is a primary account, ensure all other accounts are not primary
    if (isPrimary) {
      console.log("[CALLBACK] Setting other accounts to non-primary");
      const result = await db.calendarAccount.updateMany({
        where: {
          userId,
          id: { not: calendarAccount.id },
        },
        data: {
          isPrimary: false,
        },
      });
      console.log(`[CALLBACK] Updated ${result.count} other accounts to non-primary`);
    }

    // Trigger an immediate sync of events.
    try {
      console.log("[CALLBACK] Starting calendar sync");
      await GoogleCalendarService.syncEvents(calendarAccount);
      console.log("[CALLBACK] Calendar sync completed");
    } catch (syncError) {
      console.error("[CALLBACK] Error syncing events:", syncError);
      // Continue even if sync fails - we'll retry later
    }

    // Redirect to the Calendar Accounts page with a success message
    console.log("[CALLBACK] Redirecting to success page");
    return NextResponse.redirect(
      new URL("/dashboard/accounts?success=account_connected", request.url)
    );
  } catch (error) {
    console.error("[CALLBACK] Error in OAuth callback:", error);
    return NextResponse.redirect(
      new URL("/dashboard/accounts?error=unknown", request.url)
    );
  }
}

================
File: app/api/auth/callback/route.ts
================
// app/api/auth/callback/route.ts

import { NextRequest, NextResponse } from "next/server";
import { auth } from "@/auth";
import { db } from "@/lib/db";
import { GoogleCalendarService } from "@/lib/google-calendar";
import { getCalendarAccountCount, isLikelyWorkspaceEmail } from "@/lib/account-utils";

export async function GET(request: NextRequest) {
  try {
    // Ensure the user is authenticated
    const session = await auth();
    if (!session?.user) {
      return NextResponse.redirect(new URL("/login", request.url));
    }
    
    // Read query parameters
    const searchParams = request.nextUrl.searchParams;
    const userId = searchParams.get("userId");
    const labelParam = searchParams.get("label") || "";

    if (!userId) {
      return NextResponse.redirect(
        new URL("/dashboard/accounts?error=missing_userid", request.url)
      );
    }

    // Retrieve tokens from the session (populated via your NextAuth jwt/session callbacks)
    const token = session as any;
    const accessToken = token?.accessToken;
    const refreshToken = token?.refreshToken;
    const expiresAt = token?.accessTokenExpires;
    if (!accessToken) {
      console.error("No access token found in session");
      return NextResponse.redirect(
        new URL("/dashboard/accounts?error=token_missing", request.url)
      );
    }

    // Fetch the user's Google profile to get email, etc.
    const profileRes = await fetch("https://www.googleapis.com/oauth2/v2/userinfo", {
      headers: { Authorization: `Bearer ${accessToken}` },
    });
    if (!profileRes.ok) {
      console.error("Failed to fetch user info from Google");
      return NextResponse.redirect(
        new URL("/dashboard/accounts?error=profile_fetch_failed", request.url)
      );
    }
    const profile = await profileRes.json();

    // Determine a label for the calendar account
    const accountCount = await getCalendarAccountCount(userId);
    let label = labelParam;
    if (!label) {
      label = accountCount === 0
        ? (isLikelyWorkspaceEmail(profile.email) ? "Work Calendar" : "Primary Calendar")
        : (isLikelyWorkspaceEmail(profile.email) ? "Work Calendar" : "Personal Calendar");
    }

    // (Optional) Fetch calendar metadata (timezone, etc.)
    const calendarMetadata = await GoogleCalendarService.getCalendarMetadata(accessToken);

    // Upsert the CalendarAccount record
    const calendarAccount = await db.calendarAccount.upsert({
      where: {
        userId_email: { userId, email: profile.email },
      },
      update: {
        access_token: accessToken,
        refresh_token: refreshToken || "",
        expires_at: expiresAt || null,
        label,
        updatedAt: new Date(),
      },
      create: {
        userId,
        label,
        provider: "google",
        email: profile.email,
        access_token: accessToken,
        refresh_token: refreshToken || "",
        expires_at: expiresAt || null,
        color: getRandomColor(),
        settings: {
          timeZone: calendarMetadata.timeZone || "UTC",
          backgroundColor: calendarMetadata.backgroundColor || null,
          foregroundColor: calendarMetadata.foregroundColor || null,
        },
      },
    });

    // (Optional) Trigger a sync of events immediately
    try {
      await GoogleCalendarService.syncEvents(calendarAccount);
    } catch (error) {
      console.error("Error syncing events during account creation:", error);
    }

    // Redirect to the Calendar Accounts page with a success message
    return NextResponse.redirect(
      new URL("/dashboard/accounts?success=account_connected", request.url)
    );

  } catch (error) {
    console.error("Error in OAuth callback:", error);
    return NextResponse.redirect(
      new URL("/dashboard/accounts?error=unknown", request.url)
    );
  }
}

// Helper to generate a random color for the calendar
function getRandomColor(): string {
  const colors = [
    "#4285F4", // Google Blue
    "#EA4335", // Google Red
    "#FBBC05", // Google Yellow
    "#34A853", // Google Green
    "#8B5CF6", // Purple
    "#EC4899", // Pink
    "#F59E0B", // Amber
    "#10B981", // Emerald
  ];
  return colors[Math.floor(Math.random() * colors.length)];
}

================
File: app/api/calendars/secondary/callback/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { verify } from 'jsonwebtoken';
import { db } from '@/lib/db';
import { GoogleCalendarService } from '@/lib/google-calendar';
import { getRandomColor } from '@/lib/account-utils';

export async function GET(request: NextRequest) {
  console.log("[SECONDARY-CALLBACK] Starting callback processing");
  
  const url = new URL(request.url);
  const code = url.searchParams.get('code');
  const state = url.searchParams.get('state');
  const error = url.searchParams.get('error');
  
  // Log the entire URL for debugging
  console.log(`[SECONDARY-CALLBACK] Received callback URL: ${request.url}`);
  
  // If user denied or error from Google
  if (error) {
    console.error(`[SECONDARY-CALLBACK] OAuth error: ${error}`);
    return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/dashboard/accounts?error=google_oauth_denied`);
  }
  
  // 1. Verify 'state' param
  if (!state) {
    console.error("[SECONDARY-CALLBACK] Missing state parameter");
    return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/dashboard/accounts?error=missing_state`);
  }

  let payload;
  try {
    // Use the same secret that was used to sign the state
    const stateSecret = process.env.NEXTAUTH_SECRET || 'oauth-state-secret';
    payload = verify(state, stateSecret);
    if (typeof payload === 'object' && payload !== null) {
      console.log(`[SECONDARY-CALLBACK] State verified:`, 
        { userId: payload.userId, label: payload.label });
    } else {
      console.error('[SECONDARY-CALLBACK] Invalid payload:', payload);
    }
  } catch (err) {
    console.error('[SECONDARY-CALLBACK] Invalid state token:', err);
    return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/dashboard/accounts?error=invalid_state`);
  }
  
  const { userId, label } = payload as { userId: string; label: string };
  
  // 2. Exchange 'code' for tokens
  if (!code) {
    console.error("[SECONDARY-CALLBACK] Missing code parameter");
    return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/dashboard/accounts?error=missing_code`);
  }

  try {
    console.log(`[SECONDARY-CALLBACK] Exchanging code for tokens`);
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        code,
        client_id: process.env.AUTH_GOOGLE_ID!,
        client_secret: process.env.AUTH_GOOGLE_SECRET!,
        redirect_uri: `${process.env.NEXTAUTH_URL}/api/calendars/secondary/callback`,
        grant_type: 'authorization_code',
      })
    });
    
    if (!tokenResponse.ok) {
      const errorData = await tokenResponse.json();
      console.error('[SECONDARY-CALLBACK] Token exchange failed:', errorData);
      throw new Error(`Token exchange failed: ${errorData.error}`);
    }
    
    const tokenData = await tokenResponse.json();
    const { access_token, refresh_token, expires_in } = tokenData;
    const expires_at = Math.floor(Date.now() / 1000) + (expires_in || 3600);
    console.log(`[SECONDARY-CALLBACK] Tokens received, expires in ${expires_in} seconds`);
    
    // 3. Fetch the user's email from Google
    console.log(`[SECONDARY-CALLBACK] Fetching user profile`);
    const profileRes = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
      headers: { Authorization: `Bearer ${access_token}` },
    });
    
    if (!profileRes.ok) {
      const profileError = await profileRes.json();
      console.error('[SECONDARY-CALLBACK] Profile fetch failed:', profileError);
      throw new Error('Failed to fetch Google profile');
    }
    
    const profile = await profileRes.json();
    const email = profile.email;
    console.log(`[SECONDARY-CALLBACK] Profile email: ${email}`);
    
    // 4. Verify this isn't already a primary account for another user
    const existingAccount = await db.calendarAccount.findFirst({
      where: { 
        email, 
        isPrimary: true,
      }
    });
    
    if (existingAccount && existingAccount.userId !== userId) {
      console.error(`[SECONDARY-CALLBACK] Email is already a primary account for user: ${existingAccount.userId}`);
      return NextResponse.redirect(
        `${process.env.NEXTAUTH_URL}/dashboard/accounts?error=email_in_use&email=${encodeURIComponent(email)}`
      );
    }
    
    // 5. Create or update CalendarAccount record
    const color = getRandomColor();
    console.log(`[SECONDARY-CALLBACK] Upserting calendar account with color ${color}`);
    
    const calendarAccount = await db.calendarAccount.upsert({
      where: { userId_email: { userId, email } },
      update: {
        access_token,
        refresh_token: refresh_token || existingAccount?.refresh_token, // Keep existing refresh token if no new one
        expires_at,
        label,
        isPrimary: false, // Always false for secondary accounts
        updatedAt: new Date(),
      },
      create: {
        userId,
        provider: 'google',
        email,
        access_token,
        refresh_token: refresh_token || '',
        expires_at,
        label,
        color,
        isPrimary: false, // Always false for secondary accounts
      },
    });
    
    console.log(`[SECONDARY-CALLBACK] Calendar account created/updated: ${calendarAccount.id}`);
    
    // 6. Fetch & store calendar metadata, sync events
    try {
      console.log(`[SECONDARY-CALLBACK] Syncing events for new account`);
      await GoogleCalendarService.syncEvents(calendarAccount);
      console.log(`[SECONDARY-CALLBACK] Sync completed successfully`);
    } catch (syncError) {
      console.error(`[SECONDARY-CALLBACK] Sync failed:`, syncError);
      // Continue even if sync fails
    }
    
    // 7. Redirect back to accounts page
    console.log(`[SECONDARY-CALLBACK] Redirecting to success page`);
    return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/dashboard/accounts?success=secondary_connected`);

  } catch (err) {
    console.error('[SECONDARY-CALLBACK] Error connecting secondary account:', err);
    const errorMessage = (err as Error).message || 'Unknown error'; // Type assertion
    return NextResponse.redirect(`${process.env.NEXTAUTH_URL}/dashboard/accounts?error=secondary_connect_failed&message=${encodeURIComponent(errorMessage)}`);
  }
}

================
File: app/api/calendars/secondary/connect/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/auth';
import { sign } from 'jsonwebtoken';

export async function GET(request: NextRequest) {
  console.log('[SECONDARY-CONNECT] Starting connection process');
  
  // 1. Check user is authenticated
  const session = await auth();
  if (!session?.user) {
    console.error('[SECONDARY-CONNECT] No authenticated user');
    return NextResponse.redirect(new URL('/login', request.url));
  }
  
  // 2. Get label from query params
  const url = new URL(request.url);
  const label = url.searchParams.get('label') || 'Secondary Calendar';
  
  console.log(`[SECONDARY-CONNECT] Connecting calendar with label: ${label} for user: ${session.user.id}`);

  // 3. Generate a secure state param to store userId + label
  const statePayload = {
    userId: session.user.id,
    label,
    timestamp: Date.now(),
  };
  
  // Security note: In production, use a strong secret from env vars
  const stateSecret = process.env.NEXTAUTH_SECRET || 'oauth-state-secret';
  const state = sign(statePayload, stateSecret, { expiresIn: '15m' });

  // 4. Build the Google OAuth URL manually
  // IMPORTANT: Use the exact client ID and redirect URI configured in Google Cloud Console
  const params = new URLSearchParams({
    client_id: process.env.AUTH_GOOGLE_ID!,
    redirect_uri: `${process.env.NEXTAUTH_URL}/api/calendars/secondary/callback`,
    response_type: 'code',
    scope: 'https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar',
    access_type: 'offline',
    prompt: 'consent', // Force consent screen to ensure we get refresh token
    state,
  });

  const googleOAuthUrl = `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
  console.log(`[SECONDARY-CONNECT] Redirecting to: ${googleOAuthUrl}`);

  // 5. Redirect user to Google
  return NextResponse.redirect(googleOAuthUrl);
}

================
File: app/api/jobs/sync-calendars/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { GoogleCalendarService } from "@/lib/google-calendar";

/**
 * This endpoint is designed to be called by a scheduled job/cron
 * to sync all active calendar accounts in the background
 */
export async function POST(request: NextRequest) {
  try {
    // Verify the request is authorized (in production, use a secure token)
    const authHeader = request.headers.get('authorization');
    const jobSecret = process.env.JOB_SECRET;
    
    // Simple authorization check - improve in production
    if (jobSecret && (!authHeader || !authHeader.startsWith('Bearer ') || authHeader.split(' ')[1] !== jobSecret)) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Run the background sync
    const syncCount = await GoogleCalendarService.syncAllAccounts();
    
    return NextResponse.json({ 
      success: true, 
      message: `Successfully synced ${syncCount} accounts`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error("Error in background sync job:", error);
    return NextResponse.json(
      { 
        error: "Background sync failed", 
        message: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}

================
File: app/error/page.tsx
================
import Link from "next/link";
import { Calendar, AlertTriangle } from "lucide-react";

export const metadata = {
  title: "Error",
  description: "Something went wrong with authentication",
};

export default async function ErrorPage({
  searchParams,
}: {
  searchParams: { error?: string; primaryEmail?: string };
}) {
  // Await the searchParams to avoid the sync dynamic API error
  await Promise.resolve();
  const errorMessage = getErrorMessage(searchParams.error, searchParams.primaryEmail);

  return (
    <div className="min-h-screen flex flex-col">
      <header className="border-b-2 border-black">
        <div className="container mx-auto px-4 py-4">
          <Link href="/" className="flex items-center gap-2 w-fit">
            <Calendar className="h-7 w-7" />
            <span className="text-xl font-bold">QuickCal</span>
          </Link>
        </div>
      </header>

      <main className="flex-grow flex items-center justify-center p-4">
        <div className="w-full max-w-md">
          <div className="brutalist-box">
            <div className="text-center mb-6">
              <AlertTriangle className="h-12 w-12 mx-auto mb-4 text-red-600" />
              <h1 className="heading-md mb-2">Authentication Error</h1>
              <div className="text-lead">
                {errorMessage.split('\n').map((part, i) => (
                  <p key={i} className="mb-2">{part}</p>
                ))}
              </div>
            </div>

            <div className="flex flex-col gap-4 mt-8">
              {searchParams.error === 'secondary_account' ? (
                // Special case for secondary account login attempts
                <Link href="/login" className="brutalist-button w-full text-center">
                  Sign in with Primary Account
                </Link>
              ) : (
                <Link href="/login" className="brutalist-button w-full text-center">
                  Try Again
                </Link>
              )}
              <Link href="/" className="brutalist-button-small w-full text-center">
                Return to Home
              </Link>
            </div>

            <div className="mt-8 text-center text-sm">
              <p>
                Need help? <Link href="/help" className="brutalist-underline">Contact support</Link>
              </p>
            </div>
          </div>
        </div>
      </main>

      <footer className="border-t-2 border-black py-4">
        <div className="container mx-auto px-4 text-center text-sm">
          <p>QuickCal © 2025 • Even our errors are sarcastic</p>
        </div>
      </footer>
    </div>
  );
}

function getErrorMessage(error?: string, primaryEmail?: string): string {
  switch (error) {
    case "secondary_account":
      return `This email is already connected as a secondary calendar account.\n\nPlease sign in with your primary account (${primaryEmail || "your primary email"}) instead.`;
    case "OAuthSignin":
      return "Error starting the sign in process. Our hamsters must be on strike.";
    case "OAuthCallback":
      return "Error during the OAuth callback. Google probably judged your calendar and rejected you.";
    case "OAuthCreateAccount":
      return "Could not create a user account. We're as disappointed as you are.";
    case "EmailCreateAccount":
      return "Could not create a user account using email provider. Carrier pigeons are down.";
    case "Callback":
      return "Error during the OAuth callback. The internet spirits are displeased today.";
    case "EmailSignin":
      return "The sign in link was invalid or has expired. Just like your productivity.";
    case "CredentialsSignin":
      return "Invalid credentials. Did you forget your password? Of course you did.";
    case "SessionRequired":
      return "You need to be signed in to access that page. How shocking!";
    case "Configuration":
      return "There's an issue with our authentication configuration. Our tech team is on it (or maybe they're procrastinating).";
    case "Default":
    default:
      return "An unexpected error occurred. Our sarcasm engine is temporarily out of service.";
  }
}

================
File: app/logged-in-calendar/page.tsx
================
import { auth } from "@/auth";
import { redirect } from "next/navigation";
import { getCalendarAccountsWithStatus } from "@/lib/dashboard-data";
import { db } from "@/lib/db";
import SyncButton from "./SyncButton";

export default async function DebugCalendarPage() {
  const session = await auth();
  if (!session?.user) {
    redirect("/login");
  }

  // Fetch connected calendar accounts for the logged-in user
  const accounts = await getCalendarAccountsWithStatus(session.user.id);

  // Also fetch all meetings associated with the user (for debugging)
  const meetings = await db.meeting.findMany({
    where: { userId: session.user.id },
    orderBy: { startTime: "asc" },
  });

  return (
    <div style={{ padding: "20px", fontFamily: "sans-serif" }}>
      <h1>Debug Calendar Data</h1>
      <p>
        <strong>User:</strong> {session.user.email}
      </p>

      <section style={{ marginTop: "20px" }}>
        <h2>Connected Calendar Accounts</h2>
        {accounts.length === 0 ? (
          <p>No calendar accounts connected.</p>
        ) : (
          accounts.map((account) => (
            <div
              key={account.id}
              style={{
                border: "1px solid black",
                padding: "10px",
                marginBottom: "10px",
              }}
            >
              <p>
                <strong>Email:</strong> {account.email}
              </p>
              <p>
                <strong>Label:</strong> {account.label}
              </p>
              <p>
                <strong>Meetings Count:</strong> {account.meetingsCount}
              </p>
              <p>
                <strong>Sync Status:</strong> {account.syncStatus.label}
              </p>
              {/* Optional: display raw token info (for debugging only; remove in production) */}
              <pre style={{ background: "#f9f9f9", padding: "5px", fontSize: "12px" }}>
                {JSON.stringify(
                  {
                    access_token: account.access_token,
                    refresh_token: account.refresh_token,
                    lastSynced: account.lastSynced,
                  },
                  null,
                  2
                )}
              </pre>
            </div>
          ))
        )}
      </section>

      <section style={{ marginTop: "20px" }}>
        <h2>Meetings</h2>
        {meetings.length === 0 ? (
          <p>No meetings found.</p>
        ) : (
          meetings.map((meeting) => (
            <div
              key={meeting.id}
              style={{
                border: "1px solid gray",
                padding: "8px",
                marginBottom: "8px",
              }}
            >
              <p>
                <strong>Title:</strong> {meeting.title}
              </p>
              <p>
                <strong>Start:</strong> {meeting.startTime.toString()}
              </p>
              <p>
                <strong>End:</strong> {meeting.endTime.toString()}
              </p>
              <p>
                <strong>All Day:</strong> {meeting.allDay ? "Yes" : "No"}
              </p>
              <p>
                <strong>External ID:</strong> {meeting.externalId}
              </p>
            </div>
          ))
        )}
      </section>

      {accounts.length > 0 && (
        <section style={{ marginTop: "30px" }}>
          <h2>Sync Calendar Data (Test)</h2>
          {/* Use the first connected account for syncing */}
          <SyncButton accountId={accounts[0].id} />
        </section>
      )}
    </div>
  );
}

================
File: app/logged-in-calendar/SyncButton.tsx
================
"use client";
import { useState } from "react";

interface SyncButtonProps {
  accountId: string;
}

export default function SyncButton({ accountId }: SyncButtonProps) {
  const [syncing, setSyncing] = useState(false);
  const [result, setResult] = useState<any>(null);

  async function handleSync() {
    setSyncing(true);
    setResult(null);
    try {
      const res = await fetch(`/api/accounts/${accountId}/sync`);
      const data = await res.json();
      setResult(data);
    } catch (error: any) {
      console.error("Error syncing:", error);
      setResult({ error: error.message });
    }
    setSyncing(false);
  }

  return (
    <div>
      <button
        onClick={handleSync}
        disabled={syncing}
        style={{
          padding: "10px 20px",
          fontSize: "16px",
          cursor: "pointer",
          border: "2px solid black",
          background: "white",
          marginBottom: "10px",
        }}
      >
        {syncing ? "Syncing..." : "Sync Calendar"}
      </button>
      {result && (
        <pre
          style={{
            background: "#f4f4f4",
            padding: "10px",
            border: "1px solid #ccc",
            fontSize: "14px",
          }}
        >
          {JSON.stringify(result, null, 2)}
        </pre>
      )}
    </div>
  );
}

================
File: app/login/page.tsx
================
import Link from "next/link";
import { Calendar } from "lucide-react";
import LoginForm from "@/components/auth/login-form";

export const metadata = {
  title: "Sign In",
  description: "Sign in to QuickCal and prepare to be judged by your calendar",
};

export default function LoginPage() {
  return (
    <div className="min-h-screen flex flex-col">
      <header className="border-b-2 border-black">
        <div className="container mx-auto px-4 py-4">
          <Link href="/" className="flex items-center gap-2 w-fit">
            <Calendar className="h-7 w-7" />
            <span className="text-xl font-bold">QuickCal</span>
          </Link>
        </div>
      </header>
      
      <main className="flex-grow flex items-center justify-center p-4">
        <div className="w-full max-w-md">
          <div className="brutalist-box">
            <div className="text-center mb-8">
              <h1 className="heading-md mb-2">Sign In to QuickCal</h1>
              <p>Prepare to have your scheduling choices questioned.</p>
            </div>
            
            <LoginForm />
            
            <div className="mt-8 text-center text-sm">
              <p className="italic">
                By signing in, you agree to let us judge your calendar choices and occasionally make snarky comments about your meeting habits.
              </p>
            </div>
          </div>
        </div>
      </main>
      
      <footer className="border-t-2 border-black py-4">
        <div className="container mx-auto px-4 text-center text-sm">
          <p>QuickCal © 2025 • The calendar that thinks it's smarter than you</p>
        </div>
      </footer>
    </div>
  );
}

================
File: app/onboarding/connect-calendar/page.tsx
================
import { auth } from "@/auth";
import { redirect } from "next/navigation";
import { Calendar, ArrowLeft } from "lucide-react";
import Link from "next/link";
import AddAccountForm from "@/components/dashboard/add-account-form";
import { getCalendarAccountsWithStatus } from "@/lib/dashboard-data";

export default async function ConnectCalendarPage() {
  const session = await auth();
  
  if (!session?.user) {
    redirect("/login");
  }
  
  // Check if user already has accounts
  const accounts = await getCalendarAccountsWithStatus(session.user.id);
  
  // If user already has a primary account, redirect to dashboard
  if (accounts.some(acc => acc.isPrimary)) {
    redirect("/dashboard");
  }

  return (
    <div className="brutalist-box">
      <div className="mb-8">
        <Link 
          href="/onboarding/welcome" 
          className="brutalist-button-small inline-flex items-center gap-1 mb-4"
        >
          <ArrowLeft className="h-4 w-4" />
          Back
        </Link>
        
        <div className="text-center">
          <h1 className="heading-md mb-2">Connect Your Primary Calendar</h1>
          <p className="max-w-lg mx-auto">
            Connect your main Google Calendar to get started with QuickCal.
            This will be set as your primary calendar.
          </p>
        </div>
      </div>
      
      <div className="brutalist-box bg-white mb-8">
        <h2 className="heading-sm mb-4">Connect Your Google Calendar</h2>
        <AddAccountForm 
          userId={session.user.id} 
          isPrimary={true}
        />
      </div>
      
      <div className="brutalist-box bg-[#f4f4f4] mb-8">
        <h3 className="heading-sm mb-4">What happens next?</h3>
        <ol className="space-y-4">
          <li className="flex items-start gap-3">
            <div className="w-6 h-6 bg-black text-white rounded-full flex items-center justify-center shrink-0 mt-0.5">
              1
            </div>
            <div>
              <p className="font-bold">Google authentication</p>
              <p className="text-sm">You'll be redirected to Google to approve QuickCal's access to your calendar.</p>
            </div>
          </li>
          <li className="flex items-start gap-3">
            <div className="w-6 h-6 bg-black text-white rounded-full flex items-center justify-center shrink-0 mt-0.5">
              2
            </div>
            <div>
              <p className="font-bold">Initial synchronization</p>
              <p className="text-sm">We'll sync your calendar events (this may take a moment for large calendars).</p>
            </div>
          </li>
          <li className="flex items-start gap-3">
            <div className="w-6 h-6 bg-black text-white rounded-full flex items-center justify-center shrink-0 mt-0.5">
              3
            </div>
            <div>
              <p className="font-bold">Ready to use</p>
              <p className="text-sm">You'll be taken to your dashboard where you can start using QuickCal's features.</p>
            </div>
          </li>
        </ol>
      </div>
      
      <div className="text-center">
        <Link href="/dashboard" className="brutalist-button-small text-center">
          Skip for now
        </Link>
        <p className="mt-4 text-sm text-muted-foreground">
          You can always connect your calendar later from the dashboard.
        </p>
      </div>
    </div>
  );
}

================
File: app/onboarding/welcome/page.tsx
================
import { auth } from "@/auth";
import { redirect } from "next/navigation";
import { Calendar, Check, ArrowRight } from "lucide-react";
import Link from "next/link";
import { getCalendarAccountsWithStatus } from "@/lib/dashboard-data";

export default async function WelcomePage() {
  const session = await auth();
  
  if (!session?.user) {
    redirect("/login");
  }
  
  // Check if user already has accounts
  const accounts = await getCalendarAccountsWithStatus(session.user.id);
  
  // If user already has a primary account, redirect to dashboard
  if (accounts.some(acc => acc.isPrimary)) {
    redirect("/dashboard");
  }

  return (
    <div className="brutalist-box">
      <div className="text-center mb-8">
        <div className="inline-flex items-center justify-center w-20 h-20 bg-black text-white rounded-full mb-4">
          <Calendar className="h-10 w-10" />
        </div>
        <h1 className="heading-lg mb-2">Welcome to QuickCal!</h1>
        <p className="text-lead max-w-lg mx-auto">
          Let's set up your account and connect your primary Google Calendar.
        </p>
      </div>
      
      <div className="space-y-6 mb-8">
        <div className="brutalist-box bg-[#f4f4f4]">
          <h2 className="heading-sm mb-4">Here's what we'll do:</h2>
          <ul className="space-y-4">
            <li className="flex items-start gap-3">
              <div className="w-6 h-6 bg-black text-white rounded-full flex items-center justify-center shrink-0 mt-0.5">
                <Check className="h-4 w-4" />
              </div>
              <div>
                <p className="font-bold">Connect your primary Google Calendar</p>
                <p className="text-sm">This will be your main calendar in QuickCal.</p>
              </div>
            </li>
            <li className="flex items-start gap-3">
              <div className="w-6 h-6 bg-black text-white rounded-full flex items-center justify-center shrink-0 mt-0.5">
                <Check className="h-4 w-4" />
              </div>
              <div>
                <p className="font-bold">Sync your events</p>
                <p className="text-sm">We'll pull in your existing calendar events so you can see them right away.</p>
              </div>
            </li>
            <li className="flex items-start gap-3">
              <div className="w-6 h-6 bg-black text-white rounded-full flex items-center justify-center shrink-0 mt-0.5">
                <Check className="h-4 w-4" />
              </div>
              <div>
                <p className="font-bold">Set up your dashboard</p>
                <p className="text-sm">Customize your QuickCal experience with our AI-powered features.</p>
              </div>
            </li>
          </ul>
        </div>
        
        <div className="brutalist-box border-2 border-dashed">
          <h2 className="heading-sm mb-2">What permissions we need:</h2>
          <p className="mb-4 text-sm">
            QuickCal needs read access to your Google Calendar to provide our services. We'll never:
          </p>
          <ul className="space-y-1 text-sm">
            <li className="flex gap-2">
              <span>✓</span>
              <span>Create or delete your events without permission</span>
            </li>
            <li className="flex gap-2">
              <span>✓</span>
              <span>Share your calendar data with third parties</span>
            </li>
            <li className="flex gap-2">
              <span>✓</span>
              <span>Use your data for anything other than the features you see</span>
            </li>
          </ul>
        </div>
      </div>
      
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <Link 
          href="/onboarding/connect-calendar" 
          className="brutalist-purple brutalist-button inline-flex items-center justify-center gap-2"
        >
          Get Started
          <ArrowRight className="h-5 w-5" />
        </Link>
        
        <Link href="/dashboard" className="brutalist-button-small text-center">
          Skip for now
        </Link>
      </div>
      
      <div className="mt-6 text-center text-sm text-muted-foreground">
        <p>
          By proceeding, you agree to our{" "}
          <Link href="/terms" className="brutalist-underline">Terms of Service</Link> and{" "}
          <Link href="/privacy" className="brutalist-underline">Privacy Policy</Link>.
        </p>
      </div>
    </div>
  );
}

================
File: app/onboarding/layout.tsx
================
import { auth } from "@/auth";
import { redirect } from "next/navigation";
import { Calendar } from "lucide-react";
import Link from "next/link";

export const metadata = {
  title: "Welcome to QuickCal",
  description: "Set up your account and start organizing your calendar",
};

export default async function OnboardingLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const session = await auth();
  
  // If not authenticated, redirect to login
  if (!session?.user) {
    redirect("/login");
  }

  return (
    <div className="min-h-screen flex flex-col">
      <header className="border-b-2 border-black">
        <div className="container mx-auto px-4 py-4">
          <Link href="/" className="flex items-center gap-2 w-fit">
            <Calendar className="h-7 w-7" />
            <span className="text-xl font-bold">QuickCal</span>
          </Link>
        </div>
      </header>
      
      <main className="flex-grow flex items-center justify-center p-4">
        <div className="w-full max-w-3xl">
          {children}
        </div>
      </main>
      
      <footer className="border-t-2 border-black py-4">
        <div className="container mx-auto px-4 text-center text-sm">
          <p>QuickCal © 2025 • The calendar that thinks it's smarter than you</p>
        </div>
      </footer>
    </div>
  );
}

================
File: app/globals.css
================
@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    font-family: 'Space Grotesk', sans-serif;
  }
  
  body {
    @apply bg-white text-black antialiased;
  }
}

@layer components {
  /* Neo-Brutalist Components */
  .brutalist-box {
    @apply border-2 border-black p-5 bg-white
          shadow-[5px_5px_0px_0px_rgba(0,0,0,1)]
          hover:shadow-[7px_7px_0px_0px_rgba(0,0,0,1)]
          transition-all duration-300;
  }
  
  .brutalist-box-hover {
    @apply border-2 border-black p-5 bg-white
          shadow-[5px_5px_0px_0px_rgba(0,0,0,1)]
          hover:shadow-[7px_7px_0px_0px_rgba(0,0,0,1)]
          hover:-translate-x-[2px] hover:-translate-y-[2px]
          transition-all duration-300;
  }
  
  .brutalist-button {
    @apply border-2 border-black font-bold px-5 py-2.5
          shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
          hover:shadow-[6px_6px_0px_0px_rgba(0,0,0,1)]
          active:shadow-none active:translate-x-[4px] active:translate-y-[4px]
          transition-all duration-200 bg-white inline-block;
  }
  
  .brutalist-button-small {
    @apply border-2 border-black font-bold px-3 py-1.5 text-sm
          shadow-[3px_3px_0px_0px_rgba(0,0,0,1)]
          hover:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
          active:shadow-none active:translate-x-[3px] active:translate-y-[3px]
          transition-all duration-200 bg-white inline-block;
  }
  
  .brutalist-purple {
    @apply bg-purple-500 text-white border-2 border-black
          shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
          hover:shadow-[6px_6px_0px_0px_rgba(0,0,0,1)]
          transition-all duration-200;
  }
  
  .brutalist-pink {
    @apply bg-pink-500 text-white border-2 border-black
          shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
          hover:shadow-[6px_6px_0px_0px_rgba(0,0,0,1)]
          transition-all duration-200;
  }
  
  .brutalist-yellow {
    @apply bg-yellow-300 border-2 border-black
          shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
          hover:shadow-[6px_6px_0px_0px_rgba(0,0,0,1)]
          transition-all duration-200;
  }
  
  .brutalist-grid {
    @apply grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }
  
  .brutalist-card {
    @apply brutalist-box-hover;
  }
  
  .brutalist-input {
    @apply border-2 border-black px-3 py-2
          focus:shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
          focus:outline-none transition-all duration-200;
  }
  
  .brutalist-tag {
    @apply inline-block border-2 border-black px-2 py-0.5
          text-sm font-bold bg-white;
  }
  
  .brutalist-nav-link {
    @apply font-bold flex items-center gap-2 p-2.5
          transition-colors hover:bg-black hover:text-white;
  }
  
  .calendar-grid {
    @apply grid gap-2;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  }
  
  .calendar-event {
    @apply border-2 border-black p-3 text-sm mb-2
          hover:shadow-[3px_3px_0px_0px_rgba(0,0,0,1)]
          transition-shadow duration-200
          cursor-pointer;
  }
  
  .task-board {
    @apply grid grid-cols-1 md:grid-cols-3 gap-5;
  }
  
  .task-column {
    @apply brutalist-box min-h-[400px];
  }
  
  .task-item {
    @apply border-2 border-black p-3 mb-3
          hover:shadow-[3px_3px_0px_0px_rgba(0,0,0,1)]
          transition-shadow duration-200
          cursor-pointer bg-white;
  }
  
  .account-card {
    @apply brutalist-box-hover mb-5;
  }
  
  .brutalist-pattern {
    background-image: url("data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 6V5zM6 5v1H5z'/%3E%3C/g%3E%3C/svg%3E");
  }
  
  .brutalist-dots {
    background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E");
  }
  
  .brutalist-highlight {
    @apply bg-yellow-300 px-1 font-bold;
  }
  
  .brutalist-underline {
    @apply underline decoration-[3px] underline-offset-4;
  }
  
  .heading-xl {
    @apply text-4xl sm:text-5xl font-bold tracking-tight;
  }
  
  .heading-lg {
    @apply text-3xl sm:text-4xl font-bold tracking-tight;
  }
  
  .heading-md {
    @apply text-2xl sm:text-3xl font-bold;
  }
  
  .heading-sm {
    @apply text-xl sm:text-2xl font-bold;
  }
  
  .text-lead {
    @apply text-lg sm:text-xl;
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Space_Grotesk } from "next/font/google";
import "./globals.css";
import { Toaster } from "sonner";

const spaceGrotesk = Space_Grotesk({
  subsets: ["latin"],
  variable: "--font-space-grotesk",
  display: "swap",
});

export const metadata: Metadata = {
  title: {
    default: "QuickCal - The Calendar With Attitude",
    template: "%s | QuickCal",
  },
  description: "A brutalist AI-powered calendar app that's painfully honest about your schedule.",
  icons: {
    icon: "/favicon.ico",
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className={spaceGrotesk.variable}>
      <body>
        {children}
        <Toaster position="top-right" toastOptions={{
          style: {
            border: "2px solid black",
            boxShadow: "4px 4px 0px 0px rgba(0,0,0,1)",
            borderRadius: "0px",
            background: "white",
            color: "black",
            fontWeight: "bold",
          }
        }} />
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
import Link from "next/link";
import { auth } from "@/auth";
import { ArrowRight, Calendar, Clock, AlarmClock, Zap, Brain } from "lucide-react";

export default async function Home() {
  const session = await auth();
  const isAuthenticated = !!session?.user;
  
  return (
    <div className="min-h-screen flex flex-col">
      <header className="border-b-2 border-black">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <Calendar className="h-8 w-8" />
            <span className="text-2xl font-bold">QuickCal</span>
          </div>
          <nav>
            {isAuthenticated ? (
              <Link href="/dashboard" className="brutalist-button">
                Dashboard
              </Link>
            ) : (
              <Link href="/login" className="brutalist-button">
                Login
              </Link>
            )}
          </nav>
        </div>
      </header>
      
      <main className="flex-grow">
        <section className="py-16 md:py-24 container mx-auto px-4">
          <div className="brutalist-box max-w-4xl mx-auto">
            <h1 className="heading-xl mb-6">
              QuickCal: Because Your Calendar Needed an <span className="brutalist-highlight">Attitude Adjustment</span>
            </h1>
            <p className="text-lead mb-8">
              Oh great, <em>another</em> calendar app. But wait! This one's got AI, sarcasm, and
              absolutely zero sympathy for your poor time management skills.
            </p>
            <div className="flex flex-col sm:flex-row gap-4">
              {isAuthenticated ? (
                <Link href="/dashboard" className="brutalist-purple brutalist-button inline-flex items-center gap-2">
                  Go to Dashboard <ArrowRight className="h-5 w-5" />
                </Link>
              ) : (
                <Link href="/login" className="brutalist-purple brutalist-button inline-flex items-center gap-2">
                  Get Started <ArrowRight className="h-5 w-5" />
                </Link>
              )}
              <Link href="#features" className="brutalist-button inline-flex items-center gap-2">
                Learn More <ArrowRight className="h-5 w-5" />
              </Link>
            </div>
          </div>
        </section>
        
        <section id="features" className="py-16 container mx-auto px-4">
          <h2 className="heading-lg text-center mb-12">Features That Will Change Your Life™</h2>
          
          <div className="brutalist-grid">
            <div className="brutalist-card">
              <Clock className="h-10 w-10 mb-4" />
              <h3 className="heading-sm mb-3">Smart Scheduling</h3>
              <p className="mb-3">AI-powered scheduling that's probably just as confused as you are about your availability.</p>
              <p className="text-sm italic">"It scheduled my therapy right after my ex's wedding. How thoughtful!" - A User</p>
            </div>
            
            <div className="brutalist-card">
              <Brain className="h-10 w-10 mb-4" />
              <h3 className="heading-sm mb-3">Meeting Insights</h3>
              <p className="mb-3">Get AI summaries of your meetings that include what was actually said and what everyone was really thinking.</p>
              <p className="text-sm italic">"Now I know who's secretly plotting my downfall!" - Paranoid Manager</p>
            </div>
            
            <div className="brutalist-card">
              <AlarmClock className="h-10 w-10 mb-4" />
              <h3 className="heading-sm mb-3">Brutal Reminders</h3>
              <p className="mb-3">Get reminders that don't sugarcoat how late you are or how unprepared you'll be.</p>
              <p className="text-sm italic">"It called me a 'perpetually tardy disaster' and I've never been on time since." - Chronically Late Person</p>
            </div>
            
            <div className="brutalist-card">
              <Zap className="h-10 w-10 mb-4" />
              <h3 className="heading-sm mb-3">Multi-Calendar Syncing</h3>
              <p className="mb-3">Connect all your Google Calendars so you can disappoint people across multiple platforms simultaneously.</p>
              <p className="text-sm italic">"Now everyone knows I'm avoiding them equally!" - Professional Hermit</p>
            </div>
          </div>
        </section>
        
        <section className="py-16 container mx-auto px-4">
          <div className="brutalist-yellow max-w-2xl mx-auto p-8 text-center">
            <h2 className="heading-md mb-6">Ready to have your calendar judge you?</h2>
            <p className="text-lead mb-6">Join thousands of other masochists who apparently enjoy being sassed by their scheduling software.</p>
            <Link href="/login" className="brutalist-button">
              Start Your Free Trial*
            </Link>
            <p className="text-xs mt-4 italic">*Free as in "we'll judge you for free, forever"</p>
          </div>
        </section>
        
        <section className="py-16 container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <h2 className="heading-md text-center mb-8">How QuickCal Works</h2>
            <div className="space-y-12">
              <div className="flex flex-col md:flex-row gap-8 items-center">
                <div className="w-full md:w-1/2 brutalist-box bg-[#F3F4F6]">
                  <div className="font-mono text-sm">
                    <div className="mb-4 bg-black text-white p-2">calendar_judgment.ai</div>
                    <pre className="p-4 overflow-x-auto">
{`function analyzeSchedule(events) {
  if (events.length === 0) {
    return "Wow, your calendar is emptier than your social life.";
  }
  
  if (tooManyMeetings(events)) {
    return "Have you considered therapy for your meeting addiction?";
  }
  
  return "You've achieved mediocre calendar management. Congrats?";
}`}
                    </pre>
                  </div>
                </div>
                <div className="w-full md:w-1/2">
                  <h3 className="heading-sm mb-3">1. Connect Your Calendar</h3>
                  <p>
                    Sign in with Google and connect as many calendars as you want. Our AI will scan your events and immediately form judgmental opinions about your life choices.
                  </p>
                </div>
              </div>
              
              <div className="flex flex-col md:flex-row-reverse gap-8 items-center">
                <div className="w-full md:w-1/2 brutalist-box bg-[#F3F4F6]">
                  <div className="flex flex-col space-y-3 p-2">
                    <div className="calendar-event bg-white">
                      <div className="flex justify-between">
                        <div><span className="font-bold">Weekly Team Meeting</span></div>
                        <div className="text-xs">9:00 - 10:00 AM</div>
                      </div>
                      <div className="text-xs italic mt-1 text-red-600">
                        AI NOTE: This could've been an email.
                      </div>
                    </div>
                    <div className="calendar-event bg-white">
                      <div className="flex justify-between">
                        <div><span className="font-bold">Lunch with Craig</span></div>
                        <div className="text-xs">12:00 - 1:30 PM</div>
                      </div>
                      <div className="text-xs italic mt-1 text-red-600">
                        AI NOTE: Craig always talks about CrossFit. Prepare to be bored.
                      </div>
                    </div>
                  </div>
                </div>
                <div className="w-full md:w-1/2">
                  <h3 className="heading-sm mb-3">2. Receive Brutal Insights</h3>
                  <p>
                    Our AI analyzes your meetings and adds snarky comments directly to your events. It's like having a personal assistant who secretly hates you.
                  </p>
                </div>
              </div>
              
              <div className="flex flex-col md:flex-row gap-8 items-center">
                <div className="w-full md:w-1/2 brutalist-box bg-white">
                  <div className="task-item mb-0">
                    <div className="flex items-start gap-2">
                      <input type="checkbox" className="mt-1" />
                      <div>
                        <p className="font-bold">Prepare Q4 Report</p>
                        <p className="text-xs">Extracted from meeting "Q4 Planning"</p>
                        <p className="text-xs italic text-red-600 mt-1">AI NOTE: You'll probably procrastinate on this until the day before.</p>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="w-full md:w-1/2">
                  <h3 className="heading-sm mb-3">3. Task Extraction & Management</h3>
                  <p>
                    QuickCal automatically extracts action items from your meetings and adds pessimistic predictions about your likelihood of completing them.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>
        
        <section className="py-16 container mx-auto px-4 bg-[#F3F4F6]">
          <div className="max-w-4xl mx-auto">
            <h2 className="heading-md text-center mb-12">Frequently Asked Questions</h2>
            <div className="space-y-6">
              <div className="brutalist-box">
                <h3 className="heading-sm mb-2">Is my calendar data secure?</h3>
                <p>As secure as your life choices. But yes, we use industry-standard encryption and definitely don't sell your data to calendar enthusiasts on the dark web.</p>
              </div>
              
              <div className="brutalist-box">
                <h3 className="heading-sm mb-2">Can I turn off the sarcastic AI?</h3>
                <p>You could, but then what's the point? You might as well go back to your boring regular calendar app that doesn't judge you.</p>
              </div>
              
              <div className="brutalist-box">
                <h3 className="heading-sm mb-2">Does QuickCal work with other calendar platforms?</h3>
                <p>Currently we only support Google Calendar because, let's be honest, who uses anything else? We might add support for Outlook if enough people beg.</p>
              </div>
              
              <div className="brutalist-box">
                <h3 className="heading-sm mb-2">Is QuickCal really free?</h3>
                <p>Yes, it's free. We make money by selling your calendar data to time travelers from the future. (Just kidding. Or are we?)</p>
              </div>
            </div>
          </div>
        </section>
      </main>
      
      <footer className="border-t-2 border-black py-8">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center gap-4">
            <div className="flex items-center gap-2">
              <Calendar className="h-6 w-6" />
              <span className="text-xl font-bold">QuickCal</span>
            </div>
            <div className="text-center md:text-right">
              <p className="mb-2">Built with questionable decisions and excessive caffeine.</p>
              <p className="text-sm italic">©2025 QuickCal • No calendars were harmed in the making of this app</p>
            </div>
          </div>
          <div className="mt-8 pt-4 border-t border-gray-200 text-center">
            <div className="flex flex-wrap justify-center gap-6">
              <Link href="/terms" className="hover:underline">Terms of Service</Link>
              <Link href="/privacy" className="hover:underline">Privacy Policy</Link>
              <Link href="/help" className="hover:underline">Help Center</Link>
              <Link href="/contact" className="hover:underline">Contact</Link>
            </div>
            <p className="mt-4 text-sm text-gray-500">
              QuickCal is not responsible for hurt feelings, missed meetings, or existential crises resulting from our AI's brutal honesty.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}

================
File: components/auth/login-form.tsx
================
"use client";

import { useState } from "react";
import { Loader2 } from "lucide-react";
import { signInWithGoogle } from "@/actions/auth";

export default function LoginForm() {
  const [isLoading, setIsLoading] = useState(false);
  
  const handleGoogleSignIn = async () => {
    try {
      setIsLoading(true);
      await signInWithGoogle();
    } catch (error) {
      console.error("Login failed:", error);
      setIsLoading(false);
    }
  };
  
  return (
    <div className="space-y-4">
      <form action={signInWithGoogle}>
        <button
          type="submit"
          disabled={isLoading}
          className="brutalist-button w-full flex items-center justify-center gap-3 relative"
        >
          {isLoading ? (
            <Loader2 className="h-5 w-5 animate-spin" />
          ) : (
            <>
              <svg className="h-5 w-5" viewBox="0 0 24 24">
                <path
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  fill="#4285F4"
                />
                <path
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  fill="#34A853"
                />
                <path
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  fill="#FBBC05"
                />
                <path
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  fill="#EA4335"
                />
              </svg>
              Sign in with Google
            </>
          )}
        </button>
      </form>
      
      <div className="relative my-6">
        <div className="absolute inset-0 flex items-center">
          <span className="w-full border-t-2 border-black"></span>
        </div>
        <div className="relative flex justify-center text-sm">
          <span className="bg-white px-3 text-black">Or try our demo account</span>
        </div>
      </div>
      
      <button
        onClick={() => alert("Demo functionality coming soon!")}
        className="brutalist-button-small w-full"
      >
        Continue with Demo Account
      </button>
      
      <div className="text-center mt-6">
        <p className="text-sm">
          <span className="brutalist-highlight">Note:</span> We only support Google Calendar for now.
          More options coming when we feel like it.
        </p>
      </div>
    </div>
  );
}

================
File: components/dashboard/add-account-form.tsx
================
"use client";

import { useState } from "react";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { connectGoogleCalendar } from "@/actions/auth";

interface AddAccountFormProps {
  userId: string;
  isPrimary?: boolean;
}

export default function AddAccountForm({ userId, isPrimary = false }: AddAccountFormProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [accountLabel, setAccountLabel] = useState("");
  
  const defaultPlaceholder = isPrimary 
    ? "e.g., Primary Calendar, Work Calendar" 
    : "e.g., Personal, Work, Secret Life";
  
  const buttonText = isPrimary
    ? "Connect Primary Calendar"
    : "Connect Google Calendar";

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    if (!accountLabel || accountLabel.trim() === '') {
      toast.error("Please enter a label for this calendar");
      return;
    }
    
    setIsLoading(true);
    
    try {
      if (isPrimary) {
        // For primary accounts, use NextAuth flow
        console.log("Connecting primary calendar for user:", userId);
        await connectGoogleCalendar(userId, accountLabel, true);
      } else {
        // For secondary accounts, use direct window.location approach
        console.log("Connecting secondary calendar with label:", accountLabel);
        const encodedLabel = encodeURIComponent(accountLabel);
        
        // Directly navigate to our custom connect endpoint
        window.location.href = `/api/calendars/secondary/connect?label=${encodedLabel}`;
      }
    } catch (error: any) {
      console.error("Failed to connect calendar:", error);
      setIsLoading(false);
      toast.error("Failed to connect calendar. Please try again.");
    }
  };
  
  return (
    <div className="space-y-4">
      <form onSubmit={handleSubmit}>
        <div className="space-y-2">
          <label htmlFor="account-label" className="font-bold block">
            Calendar Label
          </label>
          <input
            id="account-label"
            name="label"
            type="text"
            value={accountLabel}
            onChange={(e) => setAccountLabel(e.target.value)}
            placeholder={defaultPlaceholder}
            className="brutalist-input w-full"
            disabled={isLoading}
            required
          />
          <p className="text-sm">
            This helps you identify this calendar in your dashboard.
            {isPrimary && " This will be your primary calendar."}
          </p>
        </div>
        
        <div className="pt-4">
          <button
            type="submit"
            disabled={isLoading}
            className={`brutalist-button w-full flex items-center justify-center gap-3 ${
              isPrimary ? 'brutalist-purple' : ''
            }`}
          >
            {isLoading ? (
              <Loader2 className="h-5 w-5 animate-spin" />
            ) : (
              <>
                <svg className="h-5 w-5" viewBox="0 0 24 24">
                  <path
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    fill="#4285F4"
                  />
                  <path
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    fill="#34A853"
                  />
                  <path
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    fill="#FBBC05"
                  />
                  <path
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    fill="#EA4335"
                  />
                </svg>
                {buttonText}
              </>
            )}
          </button>
        </div>
      </form>
      
      <div className="pt-4 text-center">
        <p className="text-sm italic">
          Note: We&apos;ll need access to read and sync your events.
          {isPrimary && " As your primary calendar, this account will be used for AI features and insights."}
        </p>
      </div>
    </div>
  );
}

================
File: components/dashboard/header.tsx
================
"use client";

import { useState } from "react";
import { Session } from "next-auth";
import { Calendar, Menu, X, Bell, Settings, LogOut } from "lucide-react";
import Link from "next/link";
import Image from "next/image";
import { signOutUser } from "@/actions/signout";

interface HeaderProps {
  user: Session["user"];
}

export default function Header({ user }: HeaderProps) {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);
  
  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
  };
  
  const toggleProfileMenu = () => {
    setIsProfileMenuOpen(!isProfileMenuOpen);
  };
  
  return (
    <header className="border-b-2 border-black">
      <div className="container mx-auto px-4 py-3">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-2">
            <Link href="/dashboard" className="flex items-center gap-2">
              <Calendar className="h-7 w-7" />
              <span className="text-xl font-bold hidden sm:inline-block">QuickCal</span>
            </Link>
            
            <span className="hidden md:inline-block text-sm px-2 py-0.5 ml-3 bg-black text-white font-bold">
              BETA
            </span>
          </div>
          
          <div className="flex items-center gap-4">
            {/* Mobile menu button */}
            <button
              onClick={toggleMobileMenu}
              className="md:hidden"
              aria-label="Toggle mobile menu"
            >
              {isMobileMenuOpen ? (
                <X className="h-6 w-6" />
              ) : (
                <Menu className="h-6 w-6" />
              )}
            </button>
            
            {/* Desktop navigation */}
            <nav className="hidden md:flex items-center gap-1">
              <Link href="/dashboard/calendar" className="brutalist-nav-link">
                Calendar
              </Link>
              <Link href="/dashboard/tasks" className="brutalist-nav-link">
                Tasks
              </Link>
              <Link href="/dashboard/accounts" className="brutalist-nav-link">
                Accounts
              </Link>
            </nav>
            
            <div className="flex items-center gap-4">
              <button
                className="relative"
                aria-label="Notifications"
              >
                <Bell className="h-5 w-5" />
                <span className="absolute -top-1 -right-1 h-4 w-4 rounded-full bg-black text-white text-[10px] flex items-center justify-center">
                  0
                </span>
              </button>
              
              <div className="relative">
                <button
                  onClick={toggleProfileMenu}
                  className="flex items-center gap-2"
                  aria-label="User menu"
                >
                  {user.image ? (
                    <Image
                      src={user.image}
                      alt={user.name || "User"}
                      width={32}
                      height={32}
                      className="rounded-full border-2 border-black"
                    />
                  ) : (
                    <div className="h-8 w-8 rounded-full bg-black text-white flex items-center justify-center font-bold">
                      {user.name?.charAt(0) || user.email?.charAt(0) || "U"}
                    </div>
                  )}
                </button>
                
                {isProfileMenuOpen && (
                  <div className="absolute right-0 mt-2 w-48 brutalist-box z-10 bg-white">
                    <div className="mb-2 pb-2 border-b-2 border-black">
                      <p className="font-bold truncate">{user.name}</p>
                      <p className="text-sm truncate">{user.email}</p>
                    </div>
                    <ul className="space-y-1">
                      <li>
                        <Link
                          href="/dashboard/settings"
                          className="flex items-center gap-2 px-2 py-1.5 hover:bg-black hover:text-white transition-colors"
                          onClick={() => setIsProfileMenuOpen(false)}
                        >
                          <Settings className="h-4 w-4" />
                          Settings
                        </Link>
                      </li>
                      <li>
                        <form action={signOutUser}>
                          <button
                            type="submit"
                            className="w-full flex items-center gap-2 px-2 py-1.5 hover:bg-black hover:text-white transition-colors text-left"
                          >
                            <LogOut className="h-4 w-4" />
                            Sign out
                          </button>
                        </form>
                      </li>
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Mobile menu */}
      {isMobileMenuOpen && (
        <nav className="md:hidden border-t-2 border-black">
          <div className="container mx-auto px-4 py-2">
            <ul className="space-y-2">
              <li>
                <Link
                  href="/dashboard/calendar"
                  className="block py-2 hover:bg-black hover:text-white transition-colors font-bold"
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  Calendar
                </Link>
              </li>
              <li>
                <Link
                  href="/dashboard/tasks"
                  className="block py-2 hover:bg-black hover:text-white transition-colors font-bold"
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  Tasks
                </Link>
              </li>
              <li>
                <Link
                  href="/dashboard/accounts"
                  className="block py-2 hover:bg-black hover:text-white transition-colors font-bold"
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  Accounts
                </Link>
              </li>
            </ul>
          </div>
        </nav>
      )}
    </header>
  );
}

================
File: components/dashboard/sidebar.tsx
================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  CalendarDays,
  ListTodo,
  Users,
  BarChart2,
  Settings,
  HelpCircle,
  Zap,
  UserPlus,
} from "lucide-react";

export default function Sidebar() {
  const pathname = usePathname();
  
  const isActive = (path: string) => {
    return pathname === path || pathname?.startsWith(`${path}/`);
  };
  
  const navigation = [
    {
      name: "Dashboard",
      href: "/dashboard",
      icon: BarChart2,
    },
    {
      name: "Calendar",
      href: "/dashboard/calendar",
      icon: CalendarDays,
    },
    {
      name: "Tasks",
      href: "/dashboard/tasks",
      icon: ListTodo,
    },
    {
      name: "Accounts",
      href: "/dashboard/accounts",
      icon: Users,
    },
    {
      name: "Settings",
      href: "/dashboard/settings",
      icon: Settings,
    },
  ];
  
  const secondaryNavigation = [
    {
      name: "Invite Friends",
      href: "/dashboard/invite",
      icon: UserPlus,
    },
    {
      name: "Upgrade Plan",
      href: "/dashboard/upgrade",
      icon: Zap,
    },
    {
      name: "Help & Support",
      href: "/dashboard/help",
      icon: HelpCircle,
    },
  ];
  
  return (
    <aside className="w-full md:w-64 border-r-2 border-black shrink-0">
      <div className="flex flex-col h-full p-4">
        <nav className="space-y-1 flex-grow">
          {navigation.map((item) => {
            const active = isActive(item.href);
            return (
              <Link
                key={item.name}
                href={item.href}
                className={`brutalist-nav-link ${
                  active ? "bg-black text-white" : ""
                }`}
              >
                <item.icon className="h-5 w-5" />
                {item.name}
              </Link>
            );
          })}
        </nav>
        
        <div className="mt-8 pt-4 border-t-2 border-black">
          <div className="brutalist-box bg-[#f4f4f4] mb-4">
            <p className="text-sm font-bold mb-2">Free Plan</p>
            <div className="w-full bg-white h-2 border border-black mb-2">
              <div className="bg-black h-full" style={{ width: "30%" }}></div>
            </div>
            <p className="text-xs">3/10 connections used</p>
          </div>
          
          <nav className="space-y-1">
            {secondaryNavigation.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className="brutalist-nav-link text-sm"
              >
                <item.icon className="h-4 w-4" />
                {item.name}
              </Link>
            ))}
          </nav>
        </div>
      </div>
    </aside>
  );
}

================
File: lib/account-utils.ts
================
// lib/account-utils.ts
import { db } from "./db";

/**
 * Find primary calendar account for a user
 * @param userId User ID to find primary account for
 * @returns Primary calendar account or null
 */
export async function findPrimaryCalendarAccount(userId: string) {
  return db.calendarAccount.findFirst({
    where: { 
      userId,
      isPrimary: true 
    },
  });
}

/**
 * Check if an email is associated with any account in the system
 * @param email Email to check
 * @returns Information about the account if found
 */
export async function checkEmailInUse(email: string) {
  // Check if this email is already associated with any account
  const calendarAccount = await db.calendarAccount.findFirst({
    where: { email },
    include: { user: true },
  });
  
  if (!calendarAccount) return null;
  
  // Return information about the associated account
  return {
    accountExists: true,
    isPrimary: calendarAccount.isPrimary,
    ownerEmail: calendarAccount.user.email,
    userId: calendarAccount.userId,
  };
}

/**
 * Get the number of calendar accounts for a user
 * @param userId User ID
 * @returns Number of connected calendar accounts
 */
export async function getCalendarAccountCount(userId: string) {
  return await db.calendarAccount.count({
    where: { userId },
  });
}

/**
 * Determine if email belongs to a Google Workspace
 * This is a simple heuristic, not foolproof
 * @param email Email to check
 * @returns boolean indicating if likely a workspace email
 */
export function isLikelyWorkspaceEmail(email: string) {
  if (!email) return false;
  
  // If it's gmail.com, it's likely personal
  if (email.endsWith('@gmail.com')) return false;
  
  // If it has a custom domain, it might be a workspace
  return true;
}

/**
 * Get a random color for a calendar
 * @returns Random color as hex string 
 */
export function getRandomColor(): string {
  const colors = [
    "#4285F4", // Google Blue
    "#EA4335", // Google Red
    "#FBBC05", // Google Yellow
    "#34A853", // Google Green
    "#8B5CF6", // Purple
    "#EC4899", // Pink
    "#F59E0B", // Amber
    "#10B981", // Emerald
  ];
  return colors[Math.floor(Math.random() * colors.length)];
}

/**
 * Get account sync statistics for dashboard display
 * @param userId User ID
 * @returns Statistics about account sync status
 */
export async function getAccountSyncStats(userId: string) {
  console.log(`[ACCOUNT-UTILS] Getting sync stats for user ${userId}`);
  
  const accounts = await db.calendarAccount.findMany({
    where: { userId },
    select: {
      id: true,
      isPrimary: true,
      lastSynced: true,
      isActive: true,
      syncEnabled: true,
      email: true,
    }
  });
  
  console.log(`[ACCOUNT-UTILS] Found ${accounts.length} accounts for user ${userId}`);
  accounts.forEach(acc => {
    console.log(`[ACCOUNT-UTILS] Account: id=${acc.id}, email=${acc.email}, isPrimary=${acc.isPrimary}`);
  });
  
  const totalAccounts = accounts.length;
  const activeSyncs = accounts.filter(acc => acc.isActive && acc.syncEnabled).length;
  const recentlySynced = accounts.filter(acc => {
    if (!acc.lastSynced) return false;
    const hoursSinceSync = (Date.now() - acc.lastSynced.getTime()) / (1000 * 60 * 60);
    return hoursSinceSync < 24;
  }).length;
  
  // Check if any account is marked as primary
  const hasPrimary = accounts.some(acc => acc.isPrimary === true);
  console.log(`[ACCOUNT-UTILS] Has primary account: ${hasPrimary}`);
  
  if (!hasPrimary && accounts.length > 0) {
    console.log("[ACCOUNT-UTILS] No account is marked as primary, fixing...");
    // Make the first account primary
    await db.calendarAccount.update({
      where: { id: accounts[0].id },
      data: { isPrimary: true }
    });
    
    console.log(`[ACCOUNT-UTILS] Set account ${accounts[0].id} as primary`);
  }
  
  return {
    totalAccounts,
    activeSyncs,
    recentlySynced,
    hasPrimary: hasPrimary || accounts.length > 0, // Will be true if we fixed it
    needsAttention: accounts.some(acc => !acc.lastSynced || !acc.isActive),
  };
}

/**
 * Ensure only one primary account exists for a user
 * @param userId User ID
 * @param primaryAccountId ID of the account that should be primary
 */
export async function ensureSinglePrimaryAccount(userId: string, primaryAccountId: string) {
  // Update the specified account to be primary
  await db.calendarAccount.update({
    where: { id: primaryAccountId },
    data: { isPrimary: true },
  });
  
  // Update all other accounts to be non-primary
  await db.calendarAccount.updateMany({
    where: {
      userId,
      id: { not: primaryAccountId },
    },
    data: { isPrimary: false },
  });
}

================
File: lib/dashboard-data.ts
================
import { db } from "./db";
import { CalendarAccount, Meeting } from "@prisma/client";
import { addDays, startOfDay, endOfDay, startOfWeek, endOfWeek, parseISO, format } from "date-fns";

type MeetingWithCalendarAccount = Meeting & {
  calendarAccount: CalendarAccount;
};

/**
 * Get dashboard statistics for a user
 * @param userId User ID
 * @returns Dashboard statistics
 */
export async function getDashboardStats(userId: string) {
  const now = new Date();
  const startOfToday = startOfDay(now);
  const endOfToday = endOfDay(now);
  const nextWeekEnd = endOfDay(addDays(now, 7));
  
  // Get accounts count
  const accountsCount = await db.calendarAccount.count({
    where: { userId },
  });
  
  // Get upcoming meetings (next 7 days)
  const upcomingMeetings = await db.meeting.findMany({
    where: {
      userId,
      startTime: {
        gte: startOfToday,
        lte: nextWeekEnd,
      },
    },
    orderBy: {
      startTime: 'asc',
    },
    include: {
      calendarAccount: true,
    },
    take: 5, // Limit to 5 upcoming meetings
  });
  
  // Get today's meetings
  const todayMeetings = await db.meeting.findMany({
    where: {
      userId,
      startTime: {
        gte: startOfToday,
        lte: endOfToday,
      },
    },
    orderBy: {
      startTime: 'asc',
    },
    include: {
      calendarAccount: true,
    },
  });
  
  // Calculate meeting hours this week
  const weekStart = startOfWeek(now, { weekStartsOn: 1 }); // Week starts on Monday
  const weekEnd = endOfWeek(now, { weekStartsOn: 1 });
  
  const weekMeetings = await db.meeting.findMany({
    where: {
      userId,
      startTime: {
        gte: weekStart,
        lte: weekEnd,
      },
    },
  });
  
  let meetingHoursThisWeek = 0;
  for (const meeting of weekMeetings) {
    // Skip all-day events from hour calculation or use a flat rate (e.g., 1 hour)
    if (meeting.allDay) {
      meetingHoursThisWeek += 1; // Count all-day events as 1 hour for stats
    } else {
      const durationMs = meeting.endTime.getTime() - meeting.startTime.getTime();
      const durationHours = durationMs / (1000 * 60 * 60);
      meetingHoursThisWeek += durationHours;
    }
  }
  
  // Get pending tasks count (if we add tasks in the future)
  const pendingTasksCount = await db.task.count({
    where: {
      userId,
      status: {
        not: 'done',
      },
    },
  });
  
  return {
    accountsCount,
    upcomingMeetingsCount: upcomingMeetings.length,
    upcomingMeetings,
    todayMeetings,
    meetingHoursThisWeek: Math.round(meetingHoursThisWeek * 10) / 10, // Round to 1 decimal place
    pendingTasksCount,
  };
}

/**
 * Get calendar accounts for a user with sync status
 * @param userId User ID
 * @returns Calendar accounts with sync status
 */
export async function getCalendarAccountsWithStatus(userId: string) {
  console.log(`[DASHBOARD-DATA] Fetching accounts for user ${userId}`);
  const accounts = await db.calendarAccount.findMany({
    where: { userId },
    orderBy: [
      { isPrimary: 'desc' }, // Primary accounts first
      { createdAt: 'asc' }   // Then by creation date
    ],
  });
  
  if (accounts.length > 0) {
    console.log(`[DASHBOARD-DATA] Found ${accounts.length} accounts. Primary status:`, 
      accounts.map(a => ({ id: a.id, email: a.email, isPrimary: a.isPrimary })));
  } else {
    console.log(`[DASHBOARD-DATA] No accounts found for user ${userId}`);
  }
  
  // Enhance with additional status information
  return Promise.all(accounts.map(async (account) => {
    const meetingsCount = await db.meeting.count({
      where: { calendarAccountId: account.id },
    });
    
    const syncStatus = getSyncStatus(account);
    
    const result = {
      ...account,
      meetingsCount,
      syncStatus,
    };
    
    return result;
  }));
}

/**
 * Determine sync status based on lastSynced timestamp
 * @param account Calendar account
 * @returns Sync status object
 */
function getSyncStatus(account: CalendarAccount) {
  if (!account.lastSynced) {
    return {
      status: 'never',
      label: 'Never synced',
      needsSync: true,
    };
  }
  
  const hoursSinceSync = (Date.now() - account.lastSynced.getTime()) / (1000 * 60 * 60);
  
  if (hoursSinceSync < 1) {
    return {
      status: 'recent',
      label: 'Recently synced',
      needsSync: false,
    };
  } else if (hoursSinceSync < 24) {
    return {
      status: 'today',
      label: `Synced ${Math.round(hoursSinceSync)} hours ago`,
      needsSync: false,
    };
  } else {
    return {
      status: 'outdated',
      label: `Last synced ${Math.floor(hoursSinceSync / 24)} days ago`,
      needsSync: true,
    };
  }
}

/**
 * Format meeting time for display
 * @param meeting Meeting object
 * @returns Formatted time string
 */
export function formatMeetingTime(meeting: Meeting) {
  if (meeting.allDay) {
    return 'All day';
  }
  
  const startTime = format(meeting.startTime, 'h:mm a');
  const endTime = format(meeting.endTime, 'h:mm a');
  return `${startTime} - ${endTime}`;
}

/**
 * Get calendar events organized into a calendar grid
 * @param userId User ID
 * @param year Year
 * @param month Month (1-12)
 * @returns Calendar grid with events
 */
export async function getCalendarMonthEvents(userId: string, year: number, month: number) {
  // Get first day of the month
  const firstDay = new Date(year, month - 1, 1);
  // Get last day of the month
  const lastDay = new Date(year, month, 0);
  
  // Calculate week day of first day (0 = Sunday, 6 = Saturday)
  const firstDayOfWeek = firstDay.getDay();
  // Calculate total days in the month
  const totalDays = lastDay.getDate();
  
  // Get events for this month
  const events = await db.meeting.findMany({
    where: {
      userId,
      startTime: {
        gte: firstDay,
        lte: lastDay,
      },
    },
    include: {
      calendarAccount: true,
    },
    orderBy: {
      startTime: 'asc',
    },
  });
  
  // Organize events by day
  const eventsByDay: { [day: number]: any[] } = {};
  events.forEach(event => {
    const day = event.startTime.getDate();
    if (!eventsByDay[day]) {
      eventsByDay[day] = [];
    }
    eventsByDay[day].push(event);
  });
  
  // Organize calendar into grid (6 weeks x 7 days)
  const grid = [];
  let dayCounter = 1;
  let daysInPreviousMonth = new Date(year, month - 1, 0).getDate();
  
  // Calculate how many days from previous month to show
  const daysFromPrevMonth = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1; // Adjust for Monday start
  
  for (let week = 0; week < 6; week++) {
    const weekDays = [];
    
    for (let day = 0; day < 7; day++) {
      if (week === 0 && day < daysFromPrevMonth) {
        // Show days from previous month
        const prevMonthDay = daysInPreviousMonth - daysFromPrevMonth + day + 1;
        weekDays.push({
          date: prevMonthDay,
          isCurrentMonth: false,
          events: [],
        });
      } else if (dayCounter > totalDays) {
        // Show days from next month
        const nextMonthDay = dayCounter - totalDays;
        weekDays.push({
          date: nextMonthDay,
          isCurrentMonth: false,
          events: [],
        });
        dayCounter++;
      } else {
        // Current month days
        weekDays.push({
          date: dayCounter,
          isCurrentMonth: true,
          events: eventsByDay[dayCounter] || [],
          isToday: isToday(year, month, dayCounter),
        });
        dayCounter++;
      }
    }
    
    grid.push(weekDays);
    
    // If we've reached the end of the month and filled the grid, stop
    if (dayCounter > totalDays && week >= 4) break;
  }
  
  return {
    year,
    month,
    grid,
    totalEvents: events.length,
  };
}

/**
 * Check if a date is today
 * @param year Year
 * @param month Month (1-12)
 * @param day Day
 * @returns Boolean indicating if the date is today
 */
function isToday(year: number, month: number, day: number) {
  const today = new Date();
  return (
    today.getFullYear() === year &&
    today.getMonth() === month - 1 &&
    today.getDate() === day
  );
}

================
File: lib/db.ts
================
import { PrismaClient } from '@prisma/client';

// PrismaClient is attached to the `global` object in development to prevent
// exhausting your database connection limit.
// Learn more: https://pris.ly/d/help/next-js-best-practices

const globalForPrisma = global as unknown as { prisma: PrismaClient };

export const db =
  globalForPrisma.prisma ||
  new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
  });

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = db;

================
File: lib/google-calendar.ts
================
import { db } from "@/lib/db";
import { CalendarAccount } from "@prisma/client";

/**
 * Google Calendar API service
 * Handles interaction with Google Calendar API
 */
export class GoogleCalendarService {
  /**
   * Fetch events from Google Calendar
   * @param accessToken Google OAuth access token
   * @param timeMin Start date (ISO string)
   * @param timeMax End date (ISO string)
   * @returns Array of Google Calendar events
   */
  static async fetchEvents(
    accessToken: string,
    timeMin: string = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days ago
    timeMax: string = new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString() // 90 days in future
  ) {
    try {
      const response = await fetch(
        `https://www.googleapis.com/calendar/v3/calendars/primary/events?timeMin=${timeMin}&timeMax=${timeMax}&singleEvents=true&orderBy=startTime&maxResults=1000`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Google Calendar API error:", errorData);
        throw new Error(`Failed to fetch calendar events: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      return data.items || [];
    } catch (error) {
      console.error("Error fetching Google Calendar events:", error);
      throw error;
    }
  }

  /**
   * Process and store events in database
   * @param calendarAccount The calendar account to fetch events for
   * @returns Number of events processed
   */
  static async syncEvents(calendarAccount: CalendarAccount) {
    try {
      // First, check if token refresh is needed
      const now = Math.floor(Date.now() / 1000);
      let accessToken = calendarAccount.access_token;

      if (calendarAccount.expires_at && calendarAccount.expires_at < now && calendarAccount.refresh_token) {
        try {
          console.log(`[CALENDAR-SERVICE] Refreshing token for account ${calendarAccount.id}`);
          const { accessToken: newToken, expiresAt } = 
            await this.refreshAccessToken(calendarAccount.refresh_token);
          
          // Update token in the database
          await db.calendarAccount.update({
            where: { id: calendarAccount.id },
            data: {
              access_token: newToken,
              expires_at: expiresAt,
            },
          });

          accessToken = newToken;
          console.log(`[CALENDAR-SERVICE] Token refreshed successfully`);
        } catch (refreshError) {
          console.error(`[CALENDAR-SERVICE] Token refresh failed:`, refreshError);
          // If refresh fails, we'll attempt to use the existing token
          // but it will likely fail as well
        }
      }
      
      // Fetch events from Google Calendar
      console.log(`[CALENDAR-SERVICE] Fetching events for account ${calendarAccount.id}`);
      const events = await this.fetchEvents(accessToken);
      console.log(`[CALENDAR-SERVICE] Fetched ${events.length} events`);
      
      // Process each event
      let eventCount = 0;
      for (const event of events) {
        // Skip events without a summary/title
        if (!event.summary) continue;
        
        // Format start/end times
        const startTime = event.start.dateTime || `${event.start.date}T00:00:00Z`;
        const endTime = event.end.dateTime || `${event.end.date}T23:59:59Z`;
        const allDay = !event.start.dateTime;
        
        // Create or update the meeting in database
        await db.meeting.upsert({
          where: {
            calendarAccountId_externalId: {
              calendarAccountId: calendarAccount.id,
              externalId: event.id,
            },
          },
          create: {
            calendarAccountId: calendarAccount.id,
            userId: calendarAccount.userId,
            externalId: event.id,
            title: event.summary,
            description: event.description || '',
            location: event.location || '',
            startTime: new Date(startTime),
            endTime: new Date(endTime),
            allDay,
            recurringEventId: event.recurringEventId,
            attendees: event.attendees || [],
            createdAt: new Date(),
            updatedAt: new Date(),
          },
          update: {
            title: event.summary,
            description: event.description || '',
            location: event.location || '',
            startTime: new Date(startTime),
            endTime: new Date(endTime),
            allDay,
            recurringEventId: event.recurringEventId,
            attendees: event.attendees || [],
            updatedAt: new Date(),
          },
        });
        
        eventCount++;
      }
      
      // Update last synced timestamp
      await db.calendarAccount.update({
        where: { id: calendarAccount.id },
        data: { 
          lastSynced: new Date(),
          isActive: true, // Mark as active since sync succeeded
        },
      });
      
      console.log(`[CALENDAR-SERVICE] Synced ${eventCount} events for account ${calendarAccount.id}`);
      return eventCount;
    } catch (error) {
      console.error(`[CALENDAR-SERVICE] Error syncing events for account ${calendarAccount.id}:`, error);
      
      // If the error is related to authentication, mark the account as inactive
      if (error instanceof Error && 
          (error.message.includes('401') || 
           error.message.includes('403') || 
           error.message.includes('authentication'))) {
        await db.calendarAccount.update({
          where: { id: calendarAccount.id },
          data: { 
            isActive: false,
            // Don't update lastSynced since it failed
          },
        });
        console.log(`[CALENDAR-SERVICE] Marked account ${calendarAccount.id} as inactive due to authentication error`);
      }
      
      throw error;
    }
  }

  /**
   * Get calendar metadata (timezone, etc)
   * @param accessToken Google OAuth access token
   * @returns Calendar metadata
   */
  static async getCalendarMetadata(accessToken: string) {
    try {
      const response = await fetch(
        "https://www.googleapis.com/calendar/v3/calendars/primary",
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Failed to fetch calendar metadata: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching calendar metadata:", error);
      throw error;
    }
  }

  /**
   * Refresh Google OAuth token
   * @param refreshToken Google OAuth refresh token
   * @returns New access token and expiry
   */
  static async refreshAccessToken(refreshToken: string) {
    try {
      const response = await fetch("https://oauth2.googleapis.com/token", {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        body: new URLSearchParams({
          client_id: process.env.AUTH_GOOGLE_ID!,
          client_secret: process.env.AUTH_GOOGLE_SECRET!,
          refresh_token: refreshToken,
          grant_type: "refresh_token",
        }),
      });

      const tokens = await response.json();
      
      if (!response.ok) {
        throw new Error(`Failed to refresh token: ${tokens.error} - ${tokens.error_description || ''}`);
      }

      return {
        accessToken: tokens.access_token,
        expiresAt: Math.floor(Date.now() / 1000) + tokens.expires_in,
      };
    } catch (error) {
      console.error("Error refreshing access token:", error);
      throw error;
    }
  }
  
  /**
   * Background sync for all active accounts
   * Should be called from a scheduled job
   */
  static async syncAllAccounts() {
    console.log(`[CALENDAR-SERVICE] Starting background sync for all accounts`);
    
    try {
      // Get all active accounts that need syncing
      // Sync accounts that haven't been synced in the last hour
      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
      
      const accounts = await db.calendarAccount.findMany({
        where: {
          isActive: true,
          syncEnabled: true,
          OR: [
            { lastSynced: null },
            { lastSynced: { lt: oneHourAgo } }
          ]
        },
      });
      
      console.log(`[CALENDAR-SERVICE] Found ${accounts.length} accounts to sync`);
      
      // Process each account
      for (const account of accounts) {
        try {
          await this.syncEvents(account);
          // Sleep briefly between accounts to avoid rate limiting
          await new Promise(resolve => setTimeout(resolve, 1000));
        } catch (accountError) {
          console.error(`[CALENDAR-SERVICE] Error syncing account ${account.id}:`, accountError);
          // Continue with other accounts even if one fails
        }
      }
      
      console.log(`[CALENDAR-SERVICE] Completed background sync for all accounts`);
      return accounts.length;
    } catch (error) {
      console.error(`[CALENDAR-SERVICE] Failed to run background sync:`, error);
      throw error;
    }
  }
}

================
File: prisma/migrations/20250220040920_add_is_primary_field/migration.sql
================
-- CreateTable
CREATE TABLE "Account" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "provider" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "refresh_token" TEXT,
    "access_token" TEXT,
    "expires_at" INTEGER,
    "token_type" TEXT,
    "scope" TEXT,
    "id_token" TEXT,
    "session_state" TEXT,

    CONSTRAINT "Account_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Session" (
    "id" TEXT NOT NULL,
    "sessionToken" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Session_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "name" TEXT,
    "email" TEXT,
    "emailVerified" TIMESTAMP(3),
    "image" TEXT,
    "isAdmin" BOOLEAN NOT NULL DEFAULT false,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "VerificationToken" (
    "identifier" TEXT NOT NULL,
    "token" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL
);

-- CreateTable
CREATE TABLE "CalendarAccount" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "label" TEXT NOT NULL,
    "provider" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "access_token" TEXT NOT NULL,
    "refresh_token" TEXT,
    "expires_at" INTEGER,
    "color" TEXT NOT NULL DEFAULT '#000000',
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "syncEnabled" BOOLEAN NOT NULL DEFAULT true,
    "isPrimary" BOOLEAN NOT NULL DEFAULT false,
    "lastSynced" TIMESTAMP(3),
    "settings" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CalendarAccount_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Meeting" (
    "id" TEXT NOT NULL,
    "calendarAccountId" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "description" TEXT,
    "location" TEXT,
    "startTime" TIMESTAMP(3) NOT NULL,
    "endTime" TIMESTAMP(3) NOT NULL,
    "allDay" BOOLEAN NOT NULL DEFAULT false,
    "recurringEventId" TEXT,
    "attendees" JSONB,
    "transcriptUrl" TEXT,
    "aiSummary" TEXT,
    "aiActionItems" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Meeting_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Task" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "description" TEXT,
    "status" TEXT NOT NULL DEFAULT 'todo',
    "priority" TEXT NOT NULL DEFAULT 'medium',
    "dueDate" TIMESTAMP(3),
    "meetingId" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Task_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Account_provider_providerAccountId_key" ON "Account"("provider", "providerAccountId");

-- CreateIndex
CREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_token_key" ON "VerificationToken"("token");

-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_identifier_token_key" ON "VerificationToken"("identifier", "token");

-- CreateIndex
CREATE UNIQUE INDEX "CalendarAccount_userId_email_key" ON "CalendarAccount"("userId", "email");

-- CreateIndex
CREATE UNIQUE INDEX "Meeting_calendarAccountId_externalId_key" ON "Meeting"("calendarAccountId", "externalId");

-- AddForeignKey
ALTER TABLE "Account" ADD CONSTRAINT "Account_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Session" ADD CONSTRAINT "Session_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "CalendarAccount" ADD CONSTRAINT "CalendarAccount_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Meeting" ADD CONSTRAINT "Meeting_calendarAccountId_fkey" FOREIGN KEY ("calendarAccountId") REFERENCES "CalendarAccount"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Meeting" ADD CONSTRAINT "Meeting_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Task" ADD CONSTRAINT "Task_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/migration_lock.toml
================
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"

================
File: prisma/schema.prisma
================
// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations to app models
  calendarAccounts CalendarAccount[]
  meetings         Meeting[]
  tasks            Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// QuickCal App Models
model CalendarAccount {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  label         String
  provider      String    // 'google', etc.
  email         String
  access_token  String    @db.Text
  refresh_token String?   @db.Text
  expires_at    Int?
  color         String    @default("#000000")
  isActive      Boolean   @default(true)
  syncEnabled   Boolean   @default(true)
  isPrimary     Boolean   @default(false)  // New field to explicitly mark primary accounts
  lastSynced    DateTime?
  settings      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  meetings      Meeting[]

  @@unique([userId, email])
}

model Meeting {
  id                String          @id @default(cuid())
  calendarAccountId String
  calendarAccount   CalendarAccount @relation(fields: [calendarAccountId], references: [id], onDelete: Cascade)
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  externalId        String          // ID from Google Calendar
  title             String
  description       String?         @db.Text
  location          String?
  startTime         DateTime
  endTime           DateTime
  allDay            Boolean         @default(false)
  recurringEventId  String?        
  attendees         Json?          // Array of emails/names
  transcriptUrl     String?        // URL to audio transcription
  aiSummary         String?        @db.Text
  aiActionItems     Json?          // Extracted action items
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@unique([calendarAccountId, externalId])
}

model Task {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?   @db.Text
  status      String    @default("todo") // todo, in-progress, done
  priority    String    @default("medium") // low, medium, high
  dueDate     DateTime?
  meetingId   String?   // Optional relation to a meeting
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: scripts/check-api-dirs.js
================
// scripts/check-api-dirs.js
const fs = require('fs');
const path = require('path');

const rootDir = path.resolve(__dirname, '..');
const apiDir = path.join(rootDir, 'app', 'api');

// Directories to check/create
const dirs = [
  path.join(apiDir, 'calendars'),
  path.join(apiDir, 'calendars', 'secondary'),
  path.join(apiDir, 'calendars', 'secondary', 'connect'),
  path.join(apiDir, 'calendars', 'secondary', 'callback'),
  path.join(apiDir, 'jobs'),
  path.join(apiDir, 'jobs', 'sync-calendars'),
];

console.log('Checking API directory structure...');

dirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    console.log(`Creating directory: ${path.relative(rootDir, dir)}`);
    fs.mkdirSync(dir, { recursive: true });
  } else {
    console.log(`Directory exists: ${path.relative(rootDir, dir)}`);
  }
});

console.log('Directory structure check complete!');

================
File: scripts/clear-db.ts
================
// scripts/clear-db.ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function clearDatabase() {
  console.log('🔄 Starting database cleanup...');
  
  try {
    console.log('Deleting Meetings...');
    await prisma.meeting.deleteMany({});
    
    console.log('Deleting Tasks...');
    await prisma.task.deleteMany({});
    
    console.log('Deleting CalendarAccounts...');
    await prisma.calendarAccount.deleteMany({});
    
    console.log('Deleting Sessions...');
    await prisma.session.deleteMany({});
    
    console.log('Deleting Accounts...');
    await prisma.account.deleteMany({});
    
    console.log('Deleting VerificationTokens...');
    await prisma.verificationToken.deleteMany({});
    
    console.log('Deleting Users...');
    await prisma.user.deleteMany({});
    
    console.log('✅ Database successfully cleared!');
  } catch (error) {
    console.error('❌ Error clearing database:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Add debugging statement to track query execution
process.on('beforeExit', () => {
  console.log('Script completed');
});

// Run the function
clearDatabase();

================
File: scripts/debug-oauth.js
================
// scripts/debug-oauth.js
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

console.log('🔍 OAuth Configuration Debug Script');
console.log('==================================\n');

// 1. Check environment variables
console.log('📋 Checking environment variables:');
const requiredVars = ['AUTH_GOOGLE_ID', 'AUTH_GOOGLE_SECRET', 'NEXTAUTH_URL', 'NEXTAUTH_SECRET'];
const missingVars = [];

requiredVars.forEach(varName => {
  if (!process.env[varName]) {
    missingVars.push(varName);
    console.log(`❌ ${varName}: Missing`);
  } else {
    // Show part of the value for verification without exposing credentials
    const value = process.env[varName];
    const maskedValue = value.substring(0, 4) + '...' + value.substring(value.length - 4);
    console.log(`✅ ${varName}: ${maskedValue}`);
  }
});

if (missingVars.length > 0) {
  console.log(`\n⚠️ Missing required environment variables: ${missingVars.join(', ')}\n`);
} else {
  console.log(`\n✅ All required environment variables are present.\n`);
}

// 2. Verify NEXTAUTH_URL format and resolution
console.log('🔗 Checking NEXTAUTH_URL configuration:');
const nextAuthUrl = process.env.NEXTAUTH_URL || '';

if (!nextAuthUrl) {
  console.log('❌ NEXTAUTH_URL is not set');
} else {
  console.log(`📝 NEXTAUTH_URL = ${nextAuthUrl}`);
  
  try {
    const url = new URL(nextAuthUrl);
    console.log(`✅ NEXTAUTH_URL is a valid URL`);
    console.log(`📝 Protocol: ${url.protocol}`);
    console.log(`📝 Host: ${url.host}`);
    console.log(`📝 Port: ${url.port || 'default'}`);
    
    // Check if it's localhost
    if (url.hostname === 'localhost') {
      console.log(`ℹ️ Using localhost - make sure Google OAuth is configured for localhost testing`);
    }
  } catch (error) {
    console.log(`❌ NEXTAUTH_URL is not a valid URL: ${error.message}`);
  }
}

// 3. Generate and show redirect URIs
console.log('\n🔀 Generated redirect URIs:');
const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000';

const redirectUris = [
  `${baseUrl}/api/auth/callback/google`,
  `${baseUrl}/api/calendars/secondary/callback`
];

redirectUris.forEach(uri => {
  console.log(`📝 ${uri}`);
});

// 4. Check if the redirect URIs are registered in the file
console.log('\n🔍 Checking redirect URIs in files:');

const searchInFiles = [
  'app/api/calendars/secondary/connect/route.ts',
  'app/api/calendars/secondary/callback/route.ts',
  'auth.ts'
];

searchInFiles.forEach(filePath => {
  try {
    const fullPath = path.join(process.cwd(), filePath);
    if (fs.existsSync(fullPath)) {
      const content = fs.readFileSync(fullPath, 'utf8');
      let fileValid = true;
      
      console.log(`📄 Checking ${filePath}:`);
      
      redirectUris.forEach(uri => {
        // Create a simpler version for matching
        const simplifiedUri = uri.replace(/^https?:\/\/[^/]+/, '');
        
        if (content.includes(uri) || content.includes(simplifiedUri) || 
            content.includes('/api/auth/callback/google') || 
            content.includes('/api/calendars/secondary/callback')) {
          console.log(`  ✅ Found reference to ${uri}`);
        } else {
          console.log(`  ❌ No reference to ${uri}`);
          fileValid = false;
        }
      });
      
      if (!fileValid) {
        console.log(`  ⚠️ Some redirect URIs might be missing in ${filePath}`);
      }
    } else {
      console.log(`❌ File not found: ${filePath}`);
    }
  } catch (error) {
    console.log(`❌ Error reading ${filePath}: ${error.message}`);
  }
});

// 5. Check Google OAuth configuration
console.log('\n🔐 Google OAuth Configuration:');
const googleClientId = process.env.AUTH_GOOGLE_ID;
const googleClientSecret = process.env.AUTH_GOOGLE_SECRET;

if (!googleClientId || !googleClientSecret) {
  console.log('❌ Google OAuth credentials are missing');
} else {
  console.log('✅ Google OAuth credentials are present');
  
  // Generate the command to test OAuth
  console.log('\n🧪 To test OAuth authorization URL manually, run:');
  const testAuthUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${googleClientId}&redirect_uri=${encodeURIComponent(`${baseUrl}/api/calendars/secondary/callback`)}&response_type=code&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar&access_type=offline&prompt=consent`;
  
  console.log(`\ncurl -v "${testAuthUrl}"\n`);
}

// 6. Final checklist and recommendations
console.log('📋 OAuth Debug Checklist:');
console.log('1. Verify both redirect URIs are added in Google Cloud Console');
console.log('2. Make sure there are no typos in the URIs');
console.log('3. Confirm your Google OAuth credentials are correct');
console.log('4. Check that all environment variables are properly loaded');
console.log('5. If using https locally, make sure certificates are valid');
console.log('6. Check for any CORS issues in browser console');
console.log('\n🔄 After making changes to Google Cloud Console, wait a few minutes for changes to propagate');

================
File: scripts/test-oauth-flow.js
================
// scripts/test-oauth-flow.js
const dotenv = require('dotenv');
const jwt = require('jsonwebtoken');
const express = require('express');
const open = require('open');

// Load environment variables
dotenv.config();

// Create a simple Express server
const app = express();
const PORT = 3333;

// Check environment variables
const clientId = process.env.AUTH_GOOGLE_ID;
const clientSecret = process.env.AUTH_GOOGLE_SECRET;
const nextAuthUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000';

if (!clientId || !clientSecret) {
  console.error('Error: Missing AUTH_GOOGLE_ID or AUTH_GOOGLE_SECRET environment variables');
  process.exit(1);
}

// Create a test state value
const stateValue = jwt.sign(
  { userId: 'test-user-id', label: 'Test Calendar', timestamp: Date.now() },
  'test-secret',
  { expiresIn: '15m' }
);

// Build Google OAuth URL for testing the redirect
const buildTestUrl = (redirectUri) => {
  const params = new URLSearchParams({
    client_id: clientId,
    redirect_uri: redirectUri,
    response_type: 'code',
    scope: 'https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar',
    access_type: 'offline',
    prompt: 'consent',
    state: stateValue,
  });

  return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
};

// Routes
app.get('/', (req, res) => {
  res.send(`
    <html>
      <head>
        <title>OAuth Test</title>
        <style>
          body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
          .button { display: inline-block; padding: 10px 15px; background: #4285F4; color: white; 
                   text-decoration: none; border-radius: 4px; margin: 10px 0; }
          .uri { font-family: monospace; background: #f1f1f1; padding: 10px; margin: 10px 0; border-radius: 4px; }
          .warning { background: #fff3cd; padding: 10px; border-left: 5px solid #ffc107; margin: 15px 0; }
        </style>
      </head>
      <body>
        <h1>OAuth Redirect URI Test</h1>
        
        <div class="warning">
          <p><strong>Note:</strong> This test checks if your redirect URIs are properly configured in Google Cloud Console.
          If the redirects fail with a "redirect_uri_mismatch" error, you need to add them to your OAuth configuration.</p>
        </div>
        
        <h2>Primary Account Flow</h2>
        <div class="uri">Redirect URI: ${nextAuthUrl}/api/auth/callback/google</div>
        <a href="${buildTestUrl(`${nextAuthUrl}/api/auth/callback/google`)}" target="_blank" class="button">
          Test Primary Account Redirect
        </a>
        
        <h2>Secondary Account Flow</h2>
        <div class="uri">Redirect URI: ${nextAuthUrl}/api/calendars/secondary/callback</div>
        <a href="${buildTestUrl(`${nextAuthUrl}/api/calendars/secondary/callback`)}" target="_blank" class="button">
          Test Secondary Account Redirect
        </a>
        
        <h2>Troubleshooting Tips</h2>
        <ul>
          <li>Ensure both redirect URIs are registered in Google Cloud Console</li>
          <li>Check that the URIs match exactly, including http/https protocol</li>
          <li>If the primary flow works but secondary doesn't, focus on adding the secondary URI</li>
          <li>After updating Google Cloud Console, changes may take a few minutes to propagate</li>
        </ul>
      </body>
    </html>
  `);
});

// Start server
app.listen(PORT, () => {
  console.log(`🚀 OAuth test server running at http://localhost:${PORT}`);
  console.log(`📝 Testing redirect URIs:`);
  console.log(`   1. ${nextAuthUrl}/api/auth/callback/google (Primary)`);
  console.log(`   2. ${nextAuthUrl}/api/calendars/secondary/callback (Secondary)`);
  
  // Open browser automatically
  open(`http://localhost:${PORT}`);
});

================
File: types/next-auth.d.ts
================
import "next-auth";

declare module "next-auth" {
  /**
   * Returned by `auth()`, `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context
   */
  interface Session {
    user: {
      id: string;
      isAdmin?: boolean;
    } & DefaultSession["user"];
  }

  /**
   * The shape of the user object returned in the OAuth providers' `profile` callback,
   * or the second parameter of the `session` callback, when using a database.
   */
  interface User {
    isAdmin?: boolean;
  }

  /**
   * Usually contains information about the provider being used
   * and also extends `TokenSet`, which is different for each provider.
   */
  interface Account {
    // Add custom properties here if needed
  }

  /** The OAuth profile returned from your provider */
  interface Profile {
    // Add custom properties here if needed
  }

  interface JWT {
    id: string;
    isAdmin?: boolean;
    accessToken?: string;
    refreshToken?: string;
    accessTokenExpires?: number;
  }
}

// We need this to make TypeScript understand the custom properties
declare module "@auth/prisma-adapter" {
  interface AdapterUser {
    isAdmin?: boolean;
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: auth.ts
================
// auth.ts - Full updated version
import NextAuth from "next-auth";
import Google from "next-auth/providers/google";
import { PrismaAdapter } from "@auth/prisma-adapter";
import { db } from "@/lib/db";
import { checkEmailInUse, getRandomColor, isLikelyWorkspaceEmail } from "@/lib/account-utils";
import { GoogleCalendarService } from "@/lib/google-calendar";

export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: PrismaAdapter(db),
  providers: [
    Google({
      clientId: process.env.AUTH_GOOGLE_ID!,
      clientSecret: process.env.AUTH_GOOGLE_SECRET!,
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code",
          scope: "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar",
        },
      },
    }),
  ],
  pages: {
    signIn: '/login',
    error: '/error',
  },
  callbacks: {
    async signIn({ user, account, profile }) {
      // Early return if account or profile is missing
      if (!account || !profile || !profile.email) return true;
      
      // For non-Google providers, just allow the sign-in
      if (account.provider !== 'google') return true;
      
      try {
        // Check if this email is already connected as a secondary account
        const emailCheck = await checkEmailInUse(profile.email);
        
        if (emailCheck && emailCheck.accountExists && !emailCheck.isPrimary) {
          // This email is being used as a secondary account
          // We'll redirect to an error page explaining that they should use their primary account
          const redirectErrorUrl = 
            `/error?error=secondary_account&primaryEmail=${encodeURIComponent(emailCheck.ownerEmail || '')}`;
          
          return redirectErrorUrl;
        }
        
        // Otherwise, continue with sign-in
        return true;
      } catch (error) {
        console.error("Error during sign-in check:", error);
        return true; // Allow the sign-in even if our check fails
      }
    },
    
    // Handle both session and JWT callbacks safely
    async session({ session, user, token }) {
      // For database sessions
      if (user) {
        session.user.id = user.id;
        session.user.isAdmin = Boolean(user.isAdmin);
      }
      // For JWT sessions
      else if (token) {
        session.user.id = token.sub || token.id as string;
        session.user.isAdmin = Boolean(token.isAdmin);
        
        // Add access token to session
        if (token.accessToken) {
          (session as any).accessToken = token.accessToken;
          (session as any).refreshToken = token.refreshToken;
          (session as any).accessTokenExpires = token.accessTokenExpires;
        }
      }
      return session;
    },
    
    async jwt({ token, user, account }) {
      // Safely handle user object which might be undefined after initial sign-in
      if (user) {
        token.id = user.id;
        token.isAdmin = Boolean(user.isAdmin);
      }
      
      // Store Google access tokens if present
      if (account && account.provider === "google") {
        token.accessToken = account.access_token;
        token.refreshToken = account.refresh_token;
        token.accessTokenExpires = account.expires_at;
      }
      
      // Check if token needs refreshing
      if (token.accessTokenExpires && Date.now() > (token.accessTokenExpires as number * 1000)) {
        try {
          if (token.refreshToken) {
            const refreshResult = await GoogleCalendarService.refreshAccessToken(token.refreshToken as string);
            
            token.accessToken = refreshResult.accessToken;
            token.accessTokenExpires = refreshResult.expiresAt;
            // Keep the existing refresh token
          }
        } catch (error) {
          console.error('Error refreshing access token:', error);
          // Return the existing token even if refresh fails
        }
      }
      
      return token;
    },
  },
  events: {
    // Auto-connect primary account on sign-in
    async signIn({ user, account, profile, isNewUser }) {
      if (user?.id && account && account.provider === "google" && profile?.email) {
        try {
          console.log(`[AUTH] User signin, checking primary account status: ${user.id}`);
          
          // Check if a calendar account already exists for this user
          const existingAccount = await db.calendarAccount.findFirst({
            where: { 
              userId: user.id,
              isPrimary: true
            }
          });
          
          // If no primary account exists and we have tokens, create one
          if (!existingAccount && account.access_token) {
            console.log(`[AUTH] Creating primary account for user: ${user.id}`);
            
            // Store the primary calendar account
            await connectPrimaryCalendarAccount({
              userId: user.id, 
              email: profile.email,
              accessToken: account.access_token,
              refreshToken: account.refresh_token,
              expiresAt: account.expires_at,
              isPrimary: true
            });
          }
        } catch (error) {
          console.error("[AUTH] Failed to handle primary account during sign-in:", error);
          // Continue sign-in process even if this fails
        }
      }
    }
  },
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  debug: process.env.NODE_ENV === 'development',
});

// Helper function to connect primary calendar account
async function connectPrimaryCalendarAccount({
  userId,
  email,
  accessToken,
  refreshToken,
  expiresAt,
  isPrimary = true
}: {
  userId: string;
  email: string;
  accessToken: string;
  refreshToken?: string;
  expiresAt?: number;
  isPrimary?: boolean;
}) {
  try {
    console.log(`[AUTH] Connecting primary calendar account for user: ${userId}, email: ${email}`);
    
    // Get calendar metadata (timezone, etc.)
    const calendarMetadata = await GoogleCalendarService.getCalendarMetadata(accessToken);
    
    // Generate a color for the calendar
    const color = getRandomColor();
    
    // Determine an appropriate label
    const label = isPrimary ? "Primary Calendar" : (
      isLikelyWorkspaceEmail(email) ? "Work Calendar" : "Personal Calendar"
    );
    
    console.log(`[AUTH] Upserting calendar account with isPrimary=${isPrimary}`);
    
    // Upsert the CalendarAccount record
    const calendarAccount = await db.calendarAccount.upsert({
      where: { 
        userId_email: { userId, email } 
      },
      update: {
        access_token: accessToken,
        refresh_token: refreshToken || "",
        expires_at: expiresAt || null,
        isPrimary: isPrimary,
        label,
        updatedAt: new Date(),
      },
      create: {
        userId,
        label,
        provider: "google",
        email,
        access_token: accessToken,
        refresh_token: refreshToken || "",
        expires_at: expiresAt || null,
        color,
        isPrimary: isPrimary,
        settings: {
          timeZone: calendarMetadata.timeZone || "UTC",
          backgroundColor: calendarMetadata.backgroundColor || null,
          foregroundColor: calendarMetadata.foregroundColor || null,
        },
      },
    });
    
    console.log(`[AUTH] Calendar account created/updated: ${calendarAccount.id}, isPrimary=${calendarAccount.isPrimary}`);
    
    // If this is a primary account, ensure all other accounts are not primary
    if (isPrimary) {
      console.log(`[AUTH] Ensuring all other accounts are not primary`);
      await db.calendarAccount.updateMany({
        where: {
          userId,
          id: { not: calendarAccount.id },
        },
        data: {
          isPrimary: false,
        },
      });
    }
    
    // Trigger a sync of events
    try {
      console.log(`[AUTH] Syncing events for new account`);
      await GoogleCalendarService.syncEvents(calendarAccount);
    } catch (syncError) {
      console.error(`[AUTH] Error syncing events for new account:`, syncError);
      // Continue even if sync fails
    }
    
    return calendarAccount;
  } catch (error) {
    console.error("[AUTH] Error connecting primary calendar account:", error);
    throw error;
  }
}

================
File: current-implementation.md
================
Below is an example of an “improvement.md” document that outlines our current implementation, the files involved, and a detailed plan to improve our flow and data organization for an industry‑grade SaaS product.

---

# QuickCal – Implementation & Improvement Roadmap

## 1. Current Implementation Overview

QuickCal is a neo‑brutalist, AI‑powered calendar application built with Next.js, NextAuth (v5 beta), and Prisma ORM (PostgreSQL). Our primary features include:

- **User Authentication & Google OAuth Integration**  
  - Users sign in using Google via NextAuth.
  - When a user opts to “Connect Google Calendar” (via `/dashboard/accounts/add`), we trigger a custom OAuth callback that upserts a record in our `CalendarAccount` table and then synchronizes events.

- **Calendar Data Synchronization**  
  - The `GoogleCalendarService` in `lib/google-calendar.ts` fetches events from Google Calendar, supports token refresh, and stores events in the `Meeting` table.
  - Manual syncs can be triggered via a “Sync Calendar” button on our debug page (`/logged-in-calendar`) and during the custom OAuth callback.

- **Dashboard & Account Management**  
  - The Accounts page (`app/(dashboard)/dashboard/accounts/page.tsx`) displays connected calendar accounts and their sync statuses.
  - A debug page (`app/logged-in-calendar/page.tsx`) shows detailed CalendarAccount data and a list of meetings.
  
- **Data Models (Prisma Schema)**  
  - **User**: Stores basic user data and is linked to NextAuth’s `Account` and `Session` models.
  - **CalendarAccount**: Holds integration-specific data (OAuth tokens, provider, email, label, settings, sync info).
  - **Meeting**: Contains events synced from Google Calendar.
  - **Task**: (Planned) For task extraction from meetings.

## 2. Files Involved

### Authentication & OAuth Flow
- **`auth.ts`**  
  Contains server‑side actions:
  - `signInWithGoogle()`
  - `connectGoogleCalendar(userId, label)` – initiates Google OAuth with a custom callback URL (or, in our final solution, embeds extra data as needed).

- **`app/api/auth/[...nextauth]/route.ts`**  
  Default NextAuth handler for processing OAuth callbacks.

- **`app/api/auth/callback/google/route.ts`**  
  Our custom callback route that:
  - Wraps the built‑in NextAuth handler.
  - Reads the custom query parameter (e.g. `label`).
  - Uses the authenticated session (and its tokens) to fetch the Google profile.
  - Upserts the CalendarAccount record in our database.
  - Optionally triggers an immediate event sync via `GoogleCalendarService.syncEvents()`.

### Calendar Integration & Utilities
- **`lib/google-calendar.ts`**  
  Contains methods to:
  - Fetch events from Google Calendar.
  - Sync events into the `Meeting` table.
  - Refresh access tokens.
  - Retrieve calendar metadata (timezone, colors, etc.).

- **`lib/account-utils.ts`**  
  Contains helper functions for:
  - Determining if an email is a workspace email.
  - Counting calendar accounts for a user.
  - (Potentially) determining the primary account.

### Dashboard & Debug Pages
- **`app/(dashboard)/dashboard/accounts/page.tsx`**  
  Displays the list of connected calendar accounts (with sync status, label, etc.) and handles status messages from query parameters.

- **`app/dashboard/accounts/add/page.tsx`**  
  The page where users can connect their Google Calendar by providing a label and triggering the OAuth flow.

- **`app/logged-in-calendar/page.tsx`**  
  A debug page that shows:
  - User’s connected CalendarAccount details.
  - A list of Meetings (events) that have been synced.
  - A manual “Sync Calendar” button for testing.

### Database & Schema
- **`prisma/schema.prisma`**  
  Defines our models for User, Account, Session, CalendarAccount, Meeting, and Task.

- **`lib/db.ts`**  
  Initializes and exports the Prisma Client.

## 3. Current Flow Details

1. **User Signs In**  
   - NextAuth handles Google OAuth and creates a User/Account in the database.
   - However, a CalendarAccount record isn’t created until the user explicitly connects their calendar.

2. **Connecting a Calendar Account**  
   - User navigates to `/dashboard/accounts/add` and clicks “Connect Google Calendar.”
   - Our custom connect action in `actions/auth.ts` (using a callback URL like `/api/auth/callback/google?label=…`) initiates the OAuth handshake.
   - The custom callback route in `app/api/auth/callback/google/route.ts`:
     - Completes the OAuth handshake.
     - Retrieves the label from the query parameter.
     - Uses the authenticated session to get the user’s ID and tokens.
     - Calls Google’s API to fetch the user profile.
     - Upserts the CalendarAccount record in our database.
     - Optionally triggers a sync to fetch events from Google Calendar into the `Meeting` table.
   - Finally, the user is redirected (e.g. to `/dashboard/accounts`), and the account appears.

3. **Dashboard and Debug Display**  
   - The Accounts page and debug page show the connected CalendarAccount and a list of Meetings (events) retrieved via the sync process.

## 4. Areas for Improvement

### A. Primary vs. Additional Calendar Accounts
- **Current:**  
  The first CalendarAccount is implicitly treated as “primary.”
- **Improvements:**  
  - Add an explicit flag (e.g. `isPrimary` or `accountType`) to the CalendarAccount model.
  - Update business logic so that:
    - The primary account is automatically connected on initial login (if desired).
    - Users can add additional (secondary) accounts that are marked differently.
  - Provide clear UI/UX distinctions between primary and additional accounts.

### B. Automatic Calendar Data Sync on Initial Login
- **Current:**  
  Sync is triggered only when the user explicitly connects a calendar.
- **Improvements:**  
  - For users who sign in with Google (and have a calendar associated with that account), consider auto‑syncing the primary calendar during initial login.
  - Use background jobs (e.g. with a job queue like Bull or a cron service) to keep calendar data updated without blocking the user’s experience.
  - Ensure error handling and retry mechanisms for token refresh and API rate limits.

### C. Enhanced Project Structure & Separation of Concerns
- **Current:**  
  Implementation is “rough” and tightly coupled in some areas.
- **Improvements:**  
  - Modularize the business logic further. For example:
    - Separate authentication-related code, calendar integration, and sync logic into distinct modules.
    - Create services (e.g. `CalendarService`, `UserService`) to encapsulate complex logic.
  - Separate presentation (UI components) from business logic (API routes, services).

### D. Improved Data Organization & Performance
- **Current:**  
  - Prisma schema defines CalendarAccount, Meeting, etc.
- **Improvements:**  
  - Optimize the Meeting model and queries for handling large datasets (e.g. by adding indexes).
  - Add relationships and foreign keys between CalendarAccount, Meeting, and Task for better data integrity.
  - Consider caching or pagination strategies on the dashboard when displaying large numbers of events.

### E. Robust Error Handling & Logging
- **Current:**  
  Some basic logging is in place (console.error).
- **Improvements:**  
  - Use a structured logging solution for production (e.g. Winston, Pino).
  - Provide more user‑friendly error messages and a fallback flow in the UI.
  - Add centralized error reporting (e.g. Sentry).

### F. Scalability & Industry‑Grade Features
- **Token Management:**  
  - Enhance token refresh logic to run in the background, reducing delays during sync.
- **Background Processing:**  
  - Offload calendar syncs to background jobs to improve response times for users.
- **CI/CD & Testing:**  
  - Establish robust unit/integration tests.
  - Set up a CI/CD pipeline to deploy code with proper environment segregation (development, staging, production).

### G. UI/UX Enhancements
- **Current:**  
  The UI is functional but has a “rough” neo‑brutalist style.
- **Improvements:**  
  - Refine the UI to balance the brutalist aesthetic with modern usability.
  - Improve responsiveness and accessibility.
  - Clearly display primary versus additional calendar accounts.

---

## 5. Files & Components Summary

- **Authentication:**  
  - `auth.ts` – Contains signIn and connect actions.  
  - `app/api/auth/[...nextauth]/route.ts` – NextAuth default handler.  
  - `app/api/auth/callback/google/route.ts` – Custom Google callback route that upserts CalendarAccount.

- **Calendar Integration:**  
  - `lib/google-calendar.ts` – Methods for fetching, syncing, and refreshing calendar events.  
  - `lib/account-utils.ts` – Helpers for calendar account logic.

- **Database:**  
  - `prisma/schema.prisma` – Data models for User, CalendarAccount, Meeting, Task, etc.  
  - `lib/db.ts` – Prisma client initialization.

- **Dashboard & UI:**  
  - `app/(dashboard)/dashboard/accounts/page.tsx` – Displays connected calendar accounts.  
  - `app/dashboard/accounts/add/page.tsx` – UI for connecting a calendar.  
  - `app/logged-in-calendar/page.tsx` – Debug page for viewing CalendarAccount and Meeting details.

---

## 6. Conclusion

Our current implementation provides a functional but rough integration for connecting Google Calendar data into QuickCal. Key next‑steps include:

- **Designating and managing primary versus secondary calendar accounts.**
- **Automating data syncs during initial login and on a schedule.**
- **Refactoring the codebase to modularize services and improve data organization.**
- **Enhancing error handling, logging, UI/UX, and scalability to meet industry standards.**

This document should serve as a roadmap for future improvements and help LLMs and new team members understand our current state and the desired direction for making QuickCal production‑ready.

--- 

Feel free to modify and expand this document as the project evolves.

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: middleware.ts
================
import { auth } from "@/auth";
import { NextResponse } from "next/server";
import { getCalendarAccountsWithStatus } from "@/lib/dashboard-data";

export default auth(async (req) => {
  const { auth: session, nextUrl } = req;
  const isLoggedIn = !!session;
  
  const isAuthPage = nextUrl.pathname === "/login";
  const isDashboardPage = nextUrl.pathname.startsWith("/dashboard");
  const isOnboardingPage = nextUrl.pathname.startsWith("/onboarding");
  
  // Allow callback and API routes to proceed 
  if (nextUrl.pathname.startsWith("/api/auth/callback") || 
      nextUrl.pathname.startsWith("/api/calendars/secondary")) {
    return NextResponse.next();
  }
  
  // Redirect unauthenticated users from protected pages to login
  if ((isDashboardPage || isOnboardingPage) && !isLoggedIn) {
    return NextResponse.redirect(new URL("/login", nextUrl));
  }
  
  // Redirect authenticated users from login to appropriate page
  if (isAuthPage && isLoggedIn) {
    // Check if user needs onboarding (no primary account)
    try {
      const accounts = await getCalendarAccountsWithStatus(session.user.id);
      
      // If no primary account exists, redirect to onboarding
      if (!accounts.some(acc => acc.isPrimary)) {
        return NextResponse.redirect(new URL("/onboarding/welcome", nextUrl));
      }
      
      // Otherwise, redirect to dashboard
      return NextResponse.redirect(new URL("/dashboard", nextUrl));
    } catch (error) {
      console.error("Error checking accounts in middleware:", error);
      // Default to dashboard if we can't check accounts
      return NextResponse.redirect(new URL("/dashboard", nextUrl));
    }
  }
  
  return NextResponse.next();
});

// Protected routes plus auth callback routes and secondary calendar routes
export const config = {
  matcher: [
    "/dashboard/:path*", 
    "/onboarding/:path*",
    "/login",
    "/api/auth/callback/:path*",
    "/api/calendars/secondary/:path*"
  ],
};

================
File: multi-account-implementation.md
================
# QuickCal Multi-Account Implementation Review

## Current Status

We have successfully implemented multi-account Google Calendar integration with a clear distinction between primary and secondary accounts. This implementation addresses the key requirements outlined in the original plan:

1. **Primary vs Secondary Accounts**
   - Primary account is created automatically during initial sign-in
   - Secondary accounts can be added without disturbing the main session
   - Clear visual distinction in the UI between primary and secondary accounts
   - Only one account can be primary at a time

2. **OAuth Flows**
   - Primary account: Uses NextAuth's standard OAuth flow
   - Secondary accounts: Uses custom OAuth flow with dedicated endpoints

3. **Data Synchronization**
   - Events sync correctly for both primary and secondary accounts
   - Tokens are refreshed automatically when needed
   - Background sync capabilities are implemented

4. **User Experience**
   - Clean UI with clear labeling for primary vs. secondary accounts
   - Successful account connection flows with appropriate feedback
   - Error handling with user-friendly messages

## Implementation Details

### Architecture

The system uses a dual-flow approach:
1. **Main Authentication Flow**: NextAuth handles user authentication and primary calendar integration
2. **Secondary Calendar Flow**: Custom routes handle additional calendar connections

Key components:
- `auth.ts`: NextAuth configuration with JWT handling and token refresh
- `/api/calendars/secondary/*`: Custom routes for secondary account connection
- `lib/google-calendar.ts`: Service for interacting with Google Calendar API 
- `lib/account-utils.ts`: Utilities for account management

### Database Schema

The `CalendarAccount` model includes:
- `isPrimary` flag to distinguish primary accounts
- Storage for OAuth tokens, refresh tokens, and expiry
- Sync status tracking with `lastSynced` timestamp

### OAuth Security

- State parameter is JWT-signed for security
- Multiple redirect URIs are registered with Google
- Proper token refresh and expiration handling
- Validation to prevent account conflicts

## Successes

1. **Clean Separation of Concerns**
   - Authentication flow is distinct from calendar integration
   - Secondary account connection doesn't interfere with primary session

2. **Robust Token Management**
   - Proper refresh token handling
   - Token expiration checks and auto-refresh
   - Access tokens are stored securely

3. **Improved User Experience**
   - Clear UI distinction between account types
   - Proper error handling with user-friendly messages
   - Sync status information is accurate and helpful

4. **Production-Ready Implementation**
   - Background sync capabilities
   - Error logging and handling throughout the flow
   - Proper validation and security measures

## Areas for Improvement

1. **OAuth Configuration Simplification**
   - Consider using a single redirect URI with different paths/parameters to reduce Google Console configuration needs
   - Implement better debugging tools for OAuth configuration issues

2. **Enhanced Error Handling**
   - More detailed error messages for OAuth failures
   - Better recovery mechanisms for token refresh failures
   - Improved UI feedback for sync failures

3. **Background Sync Optimization**
   - Implement more efficient background sync with rate limiting
   - Add prioritization for accounts that need syncing most urgently
   - Implement exponential backoff for failed sync attempts

4. **Performance Improvements**
   - Optimize database queries for large event volumes
   - Implement smart syncing (only recent/upcoming events)
   - Add indexing to improve query performance for calendar views

5. **Testing and Monitoring**
   - Add comprehensive integration tests for OAuth flows
   - Implement monitoring for sync processes
   - Add telemetry for OAuth success/failure rates

## Next Steps

1. **Refine OAuth Error Handling**
   - Add more detailed error logging
   - Improve user-facing error messages
   - Create a troubleshooting guide for common OAuth issues

2. **Optimize Event Syncing**
   - Implement partial sync (e.g., only sync the next 3 months)
   - Add batch processing for large calendars
   - Improve performance for users with many accounts

3. **Calendar Management Features**
   - Add ability to change primary account
   - Implement account removal with cleanup
   - Add account-specific settings (sync frequency, event filtering)

4. **Enhanced Testing**
   - Create automated tests for OAuth flows
   - Add integration tests for multi-account scenarios
   - Implement CI checks for OAuth configuration

5. **Security Enhancements**
   - Review token storage security
   - Implement better state parameter handling
   - Add additional validation for secondary account connections

## Technical Debt

1. **OAuth Flow Complexity**
   - The dual flow approach adds complexity to the codebase
   - Consider refactoring to a more unified approach while maintaining separation of concerns

2. **Error Handling Consistency**
   - Standardize error handling across components
   - Create reusable error handling utilities

3. **Configuration Management**
   - Move more configuration to environment variables
   - Create a dedicated configuration service

4. **Code Organization**
   - Further modularize the calendar integration services
   - Create cleaner separation between core auth and calendar functionality

## Conclusion

The multi-account implementation successfully meets the key requirements and provides a solid foundation for future enhancements. The architecture separates authentication from calendar integration, allowing users to maintain a stable primary session while connecting additional accounts.

The main technical challenges were around OAuth configuration and redirect handling, but these were successfully resolved. The implementation follows best practices for token management and provides a clean user experience.

Moving forward, the focus should be on optimizing performance, enhancing error handling, and adding more advanced calendar management features while maintaining the clean separation between authentication and integration concerns.

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  images: {
    domains: [
      'lh3.googleusercontent.com',
      'googleusercontent.com'
    ],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**.googleusercontent.com',
      },
    ],
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "quick-cal",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "prisma:generate": "prisma generate",
    "prisma:push": "prisma db push",
    "postinstall": "prisma generate"
  },
  "dependencies": {
    "@auth/prisma-adapter": "^2.7.4",
    "@prisma/client": "^6.4.0",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.475.0",
    "next": "15.1.7",
    "next-auth": "^5.0.0-beta.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "sonner": "^2.0.0",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/jsonwebtoken": "^9.0.8",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "dotenv": "^16.4.7",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "open": "^10.1.0",
    "postcss": "^8",
    "prisma": "6.3.1",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
    plugins: {
      tailwindcss: {},
    },
  };
  
  export default config;

================
File: project-status.md
================
# QuickCal Project Status

## Project Overview
QuickCal is a SaaS platform that consolidates multiple Google Calendars, transcribes meeting audio, provides AI-driven insights, and offers robust task management. The application features a neo-brutalist UI design with a distinctly sarcastic tone throughout the user experience.

## Current Status
The project is in early development with the core framework and authentication flow set up. Basic UI components and page structure have been implemented, but full functionality is not yet available.

## Tech Stack
- **Frontend:** Next.js 15 (App Router), React, TailwindCSS
- **Authentication:** NextAuth.js (Auth.js v5 beta)
- **Database:** PostgreSQL with Prisma ORM
- **Styling:** Custom neo-brutalist design system using TailwindCSS
- **Deployment:** Not yet configured (planned: Vercel)

## Completed Work

### 1. Project Structure
- ✅ Set up Next.js 15 with App Router
- ✅ Organized folder structure for scalability
- ✅ Implemented route grouping for authentication and dashboard sections

### 2. Authentication
- ✅ Configured NextAuth.js with Google OAuth provider
- ✅ Set up Prisma adapter for database integration
- ✅ Created login flow with JWT strategy
- ✅ Implemented protected routes with middleware
- ✅ Added error handling and custom error pages

### 3. Database
- ✅ Defined Prisma schema with the following models:
  - User
  - Account
  - Session
  - VerificationToken
  - CalendarAccount
  - Meeting
  - Task
- ✅ Configured database connection with Supabase PostgreSQL

### 4. UI Components
- ✅ Designed and implemented neo-brutalist component system:
  - Buttons (primary, secondary, small)
  - Boxes and cards
  - Form inputs
  - Navigation elements
  - Typography system
- ✅ Created responsive layouts for all pages

### 5. Pages
- ✅ Landing page with feature showcase
- ✅ Login page with Google authentication
- ✅ Dashboard home with placeholder stats
- ✅ Calendar view (UI only)
- ✅ Account management screens (UI only)
- ✅ Error pages

## In Progress / Pending Work

### 1. Authentication
- ⏳ Testing and fixing Google OAuth integration
- ⏳ Handling token refresh for Google Calendar API

### 2. Calendar Integration
- 🔲 Implementing Google Calendar API connectivity
- 🔲 Calendar event synchronization
- 🔲 Multi-account support
- 🔲 Event creation and management

### 3. AI Features
- 🔲 Meeting transcription
- 🔲 AI analysis of meetings
- 🔲 Task extraction from meetings
- 🔲 Calendar insights

### 4. Task Management
- 🔲 Task CRUD operations
- 🔲 Task status management
- 🔲 Linking tasks with meetings

### 5. Infrastructure
- 🔲 CI/CD setup
- 🔲 Environment configuration for staging/production
- 🔲 Monitoring and logging

## Known Issues

1. **Authentication Configuration**: 
   - Type conflicts between NextAuth.js and Prisma adapter
   - Need to ensure proper scope for Google Calendar API access

2. **UI Build Issues**:
   - TailwindCSS configuration errors with custom utilities
   - Need to simplify styling approach for better compatibility

3. **React Version Compatibility**:
   - Some dependencies have conflicts with React 19
   - Need to standardize on React 18 until better compatibility

## Next Steps

1. **Fix Authentication Flow**:
   - Complete Google OAuth configuration
   - Test full authentication cycle
   - Ensure token management works correctly

2. **Implement Core Calendar Functionality**:
   - Connect to Google Calendar API
   - Implement basic event fetching
   - Display real calendar data

3. **Stabilize Build Process**:
   - Resolve TailwindCSS configuration issues
   - Standardize environment setup
   - Ensure consistent development experience

4. **Begin AI Integration Research**:
   - Evaluate options for meeting transcription
   - Test preliminary AI analysis capabilities
   - Develop prototype for task extraction

## Google OAuth Configuration

For testing the SSO login, you need to add the following Authorized Redirect URI in your Google Cloud Console:

```
http://localhost:3000/api/auth/callback/google
```

This is the callback endpoint that Google will redirect to after successful authentication. For production, you would need to add your production domain with the same path.

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/globals.css"
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ["Space Grotesk", "sans-serif"],
      },
    },
  },
  plugins: [],
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================================
End of Codebase
================================================================
